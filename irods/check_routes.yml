---
- name: Stop iRODS
  ansible.builtin.import_playbook: stop_all.yml
  tags:
    - non_idempotent


- name: Start receivers
  hosts: irods
  vars:
    ephemeral_ports: >-
      {{ range(_irods_server_port_range_start|int, _irods_server_port_range_end|int + 1) | list }}
  tags:
    - non_idempotent
  tasks:
    - name: Wait for active zone port connections to close
      ansible.builtin.wait_for:
        port: "{{ _irods_zone_port }}"
        state: drained

    - name: Start receiver
      port_check_receiver:
        tcp_ports: >-
          {{ [_irods_zone_port, _irods_server_control_plane_port] | union(ephemeral_ports) }}
        udp_ports: "{{ ephemeral_ports }}"
      async: 600
      poll: 0
      register: receiver
      changed_when: false


- name: Check ports from catalog service providers
  hosts: irods_catalog
  gather_facts: false
  serial: 1
  tags:
    - non_idempotent
  tasks:
    - name: Check own grid port
      port_check_sender:
        destination: "{{ ansible_fqdn }}"
        tcp_ports:
          - "{{ _irods_server_control_plane_port }}"
      ignore_errors: true
      tags:
        - skip_ansible_lint

    - name: Check other providers grid port
      port_check_sender:
        destination: "{{ item }}"
        tcp_ports:
          - "{{ hostvars[item]._irods_server_control_plane_port }}"
      ignore_errors: true
      with_items: >-
        {{ groups['irods_catalog']
          | difference(groups['irods_resource'])
          | difference([inventory_hostname]) }}
      tags:
        - skip_ansible_lint

    - name: Check resource server ports
      port_check_sender:
        destination: "{{ item }}"
        tcp_ports:
          - "{{ hostvars[item]._irods_zone_port }}"
          - "{{ hostvars[item]._irods_server_control_plane_port }}"
        timeout: "{{ _check_routes_timeout }}"
      ignore_errors: true
      with_items: "{{ groups['irods_resource'] | difference([inventory_hostname]) }}"
      tags:
        - skip_ansible_lint


- name: Check port access from resource servers
  hosts: irods_resource
  gather_facts: false
  serial: 1
  tags:
    - non_idempotent
  tasks:
    - name: Check catalog service providers ports
      port_check_sender:
        destination: "{{ item }}"
        tcp_ports:
          - "{{ hostvars[item]._irods_zone_port }}"
        timeout: "{{ _check_routes_timeout }}"
      ignore_errors: true
      with_items: "{{ groups['irods_catalog'] | difference([inventory_hostname]) }}"
      tags:
        - skip_ansible_lint

    - name: Check other resource servers ports
      port_check_sender:
        destination: "{{ item }}"
        tcp_ports: >-
          {{ [hostvars[item]._irods_zone_port]
            | union(
              range(
                hostvars[item]._irods_server_port_range_start | int,
                hostvars[item]._irods_server_port_range_end | int + 1 )
              | list ) }}
        udp_ports: >-
          {{ range(
              hostvars[item]._irods_server_port_range_start | int,
              hostvars[item]._irods_server_port_range_end | int + 1 )
            | list }}
        timeout: "{{ _check_routes_timeout }}"
      ignore_errors: true
      with_items: "{{ groups['irods_resource'] | difference([inventory_hostname]) }}"
      tags:
        - skip_ansible_lint


- name: Stop receivers
  hosts: irods
  gather_facts: false
  tags:
    - non_idempotent
  tasks:
    - name: Stop receiver
      port_check_sender:
        tcp_ports:
          - "{{ _irods_zone_port }}"
        msg: finished
      ignore_errors: true
      tags:
        - skip_ansible_lint

    - name: Wait for receiver to stop
      ansible.builtin.async_status:
        jid: "{{ receiver.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 1
      failed_when: not job_result.finished

    - name: Check receiver failure
      when: job_result.msg is defined
      ansible.builtin.fail:
        msg: '{{ job_result.msg }}'
      ignore_errors: true
      tags:
        - skip_ansible_lint


- name: Restart previously stopped iRODS servers
  hosts: irods
  become: "{{ _become_svc_acnt }}"
  become_user: "{{ _irods_service_account_name }}"
  gather_facts: false
  tasks:
    - name: Restart
      when: stop_all_result is changed
      ansible.builtin.include_tasks: tasks/restart_irods.yml
      vars:
        restart_op: always
      tags:
        - non_idempotent
        - skip_ansible_lint
