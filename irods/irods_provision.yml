---
- name: Provision for iRODS
  hosts: irods:!unmanaged_systems
  become: true
  tasks:
    - name: Provision CentOS
      when: ansible_distribution == 'CentOS'
      block:
        - name: CentOS | install iRODS package repository signing key
          ansible.builtin.rpm_key:
            key: https://packages.irods.org/irods-signing-key.asc

        - name: CentOS | install iRODS repository
          ansible.builtin.get_url:
            url: https://packages.irods.org/renci-irods.yum.repo
            dest: /etc/yum.repos.d/renci-irods.yum.repo
            mode: u+r

        - name: CentOS | force import of GPG key
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: |
              if ! resp="$(yum --assumeyes updateinfo)"; then
                exit 1
              fi
              if [[ "$resp" =~ irods-signing-key ]]; then
                echo changed
              fi
          register: response
          changed_when: response.stdout == 'changed'

        - name: CentOS | update irods package lock version
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: |
              set -o errexit -o pipefail
              readarray irods_locks < <(yum versionlock list | sed --quiet '/^0:irods-/p')
              for lock in "${irods_locks[@]}"; do
                ver="$(sed 's/^0:irods-.*-\([0-9\.]\+\)-.*/\1/' <<< "$lock")"
                if [[ "$ver" != '{{ _irods_version }}' ]]; then
                  pkg="$(sed 's/0:\(irods-.*\)-[0-9\.]\+-.*/\1/' <<< "$lock")"
                  yum versionlock delete "$pkg" > /dev/null
                  yum versionlock add "$pkg"-'{{ _irods_version }}' > /dev/null
                  echo changed
                fi
              done
          register: resp
          changed_when: resp.stdout is regex('^changed')

        - name: CentOS | lock irods packages to required version
          community.general.yum_versionlock:
            name:
              - irods-icommands-{{ _irods_version }}
              - irods-runtime-{{ _irods_version }}
              - irods-server-{{ _irods_version }}
            state: present
  # XXX - Due to https://github.com/ansible-collections/community.general/issues/4470, this isn't
  # idempotent.
          tags: non_idempotent
  # XXX - ^^^
# XXX - ^^^

        - name: CentOS | install iRODS server
          ansible.builtin.yum:
            name: irods-server-{{ _irods_version }}
            state: present

        - name: CentOS | install OS specific required packages
          ansible.builtin.package:
            name:
              - uuidd
              - which
            state: present

    - name: Provision Ubuntu
      when: ansible_distribution == 'Ubuntu'
      block:
        - name: Ubuntu | install iRODS package repository signing key
          ansible.builtin.apt_key:
            url: https://packages.irods.org/irods-signing-key.asc

        - name: Ubuntu | install iRODS repository
          ansible.builtin.copy:
            dest: /etc/apt/sources.list.d/renci-irods.list
            mode: u+rw
            content: |
              deb [arch=amd64] https://packages.irods.org/apt/ {{ ansible_lsb.codename }} main

        - name: Ubuntu | update apt cache
          ansible.builtin.apt:
            update_cache: true
          tags:
            - non_idempotent

        - name: Ubuntu | lock iRODS packages to required version
          ansible.builtin.copy:
            dest: /etc/apt/preferences.d/irods
            mode: u+rw
            content: |
              Package: irods-*
              Pin: version {{ _irods_version }}
              Pin-Priority: 1001

        - name: Ubuntu | install iRODS server
          ansible.builtin.apt:
            name: irods-server={{ _irods_version }}-0~bionic
            state: present

        - name: Ubuntu | install OS specific required packages
          ansible.builtin.package:
            name:
              - debianutils
              - uuid-runtime
            state: present

    - name: Ensure iRODS attempts to start on boot
      ansible.builtin.service:
        name: irods
        enabled: true

    - name: Create service group
      ansible.builtin.group:
        name: "{{ _irods_service_group_name }}"
        system: true

    - name: Create service account
      ansible.builtin.user:
        name: "{{ _irods_service_account_name }}"
        system: true
        home: /var/lib/irods
        createhome: true
        group: "{{ _irods_service_group_name }}"
        groups: tty
        shell: /bin/bash
        comment: iRODS Administrator

    - name: Ensure iRODS ownership
      ansible.builtin.import_tasks: tasks/ensure_irods_ownership.yml

    - name: Ensure default policy files are up-to-date
      ansible.builtin.copy:
        dest: /etc/irods/{{ item }}
        src: /var/lib/irods/packaging/{{ item }}.template
        remote_src: true
        owner: "{{ _irods_service_account_name }}"
        group: "{{ _irods_service_group_name }}"
        mode: u+r
      with_items:
        - core.dvm
        - core.fnm
        - core.re


- name: Update /etc/hosts
  ansible.builtin.import_playbook: irods_hosts.yml
