---
- name: Run-time initialization
  hosts: irods_catalog
  become: "{{ _become_svc_acnt }}"
  become_user: "{{ _irods_service_account_name }}"
  run_once: true
  tasks:
    - name: Ensure service user type exists
      irods_user_type:
        type: ds-service
        description: a Data Store service

    - name: Ensure public group's home is correct
      become: false
      delegate_to: localhost
      irods_move:
        source: /{{ _irods_zone_name }}/home/public
        destination: /{{ _irods_zone_name }}/home/shared
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Ensure public group's trash is correct
      become: false
      delegate_to: localhost
      irods_move:
        source: /{{ _irods_zone_name }}/trash/home/public
        destination: /{{ _irods_zone_name }}/trash/home/shared
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Ensure CyVerse curated collection base collection exists
      become: false
      delegate_to: localhost
      irods_collection:
        path: /{{ _irods_zone_name }}/home/shared/commons_repo/curated
        parents: true
        state: present
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Check if collections have ipc_UUID using iquest and store missing ones
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          output=$(iquest '%s' "select META_COLL_ATTR_VALUE where META_COLL_ATTR_NAME = 'ipc_UUID' and COLL_NAME = '{{ item }}'")
            if [[ "$output" == *"CAT_NO_ROWS_FOUND"* ]] || [[ -z "$output" ]]; then
            echo "UUID not found for collection: {{ item }}: $output"
          fi
      with_items:
        - /{{ _irods_zone_name }}
        - /{{ _irods_zone_name }}/home
        - /{{ _irods_zone_name }}/home/{{ _irods_clerver_user }}
        - /{{ _irods_zone_name }}/home/shared
        - /{{ _irods_zone_name }}/trash
        - /{{ _irods_zone_name }}/trash/home
        - /{{ _irods_zone_name }}/trash/home/{{ _irods_clerver_user }}
        - /{{ _irods_zone_name }}/trash/home/shared
      register: uuid_check
      changed_when: false
      ignore_errors: true

    - name: Call lookup plugin for uuid 
      ansible.builtin.debug:
        msg: "{{ lookup('uuid', 't') }}"

    - name: Store collections without ipc_UUID
      ansible.builtin.set_fact:
        collections_without_uuid: "{{ uuid_check.results | selectattr('stdout', 'search', 'UUID not found') | map(attribute='item') | list }}"

    - name: Add UUID to collections without ipc_UUID
      ansible.builtin.shell: |
        uuid=$(uuidgen -t)
        imeta set -C {{ item }} ipc_UUID $uuid
      with_items: "{{ collections_without_uuid }}"
      changed_when: true
      register: cmd_result
      ignore_errors: false

    - name: Initialize rodsadmin perms
      when: init_rodsadmin_perms | d(false)
      delegate_to: localhost
      become: false
      block:
        - name: Give rodsadmin group write permission on top-level static collections
          irods_permission:
            zone: "{{ _irods_zone_name }}"
            subject: rodsadmin
            permission: write
            object: "{{ item }}"
            host: "{{ groups['irods_catalog'][0] }}"
            port: "{{ _irods_zone_port }}"
            admin_user: "{{ _irods_clerver_user }}"
            admin_password: "{{ _irods_clerver_password }}"
          with_items:
            - /
            - /{{ _irods_zone_name }}
            - /{{ _irods_zone_name }}/home
            - /{{ _irods_zone_name }}/trash
            - /{{ _irods_zone_name }}/trash/home

        - name: Give rodsadmin group own permission on home collections
          irods_permission:
            zone: "{{ _irods_zone_name }}"
            subject: rodsadmin
            permission: own
            object: "{{ item }}"
            recursion: exclusive
            host: "{{ groups['irods_catalog'][0] }}"
            port: "{{ _irods_zone_port }}"
            admin_user: "{{ _irods_clerver_user }}"
            admin_password: "{{ _irods_clerver_password }}"
          with_items:
            - /{{ _irods_zone_name }}/home
            - /{{ _irods_zone_name }}/trash/home

    - name: Ensure anonymous user exists
      delegate_to: localhost
      become: false
      irods_user:
        name: anonymous
        password: ''
        state: present
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Ensure anonymous user has read access to required collections
      delegate_to: localhost
      become: false
      # no_log: true
      irods_permission:
        subject: anonymous
        permission: read
        object: "{{ item }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"
      with_items:
        - /{{ _irods_zone_name }}
        - /{{ _irods_zone_name }}/home
        - /{{ _irods_zone_name }}/home/shared
        - /{{ _irods_zone_name }}/home/shared/commons_repo/curated

    - name: Start quota usage computation
      delegate_to: localhost
      become: false
      # no_log: true
      ansible.builtin.command:
        cmd: >
          irule --rule-engine-plugin-instance=irods_rule_engine_plugin-irods_rule_language-instance
            cyverse_housekeeping_rescheduleQuotaUsageUpdate null ruleExecOut
        stdin: "{{ _irods_admin_password }}"
      register: results
      changed_when: results.stdout == 'scheduled quota usage updates'

    - name: Start storage free space determination
      delegate_to: localhost
      become: false
      # no_log: true
      ansible.builtin.command:
        cmd: >
          irule --rule-engine-plugin-instance=irods_rule_engine_plugin-irods_rule_language-instance
            cyverse_housekeeping_rescheduleStorageFreeSpaceDetermination null ruleExecOut
        stdin: "{{ _irods_admin_password }}"
      register: results
      changed_when: results.stdout == 'scheduled storage determination'

    - name: Start trash removal
      delegate_to: localhost
      become: false
      # no_log: true
      ansible.builtin.command:
        cmd: >
          irule --rule-engine-plugin-instance=irods_rule_engine_plugin-irods_rule_language-instance
            cyverse_housekeeping_rescheduleTrashRemoval null ruleExecOut
        stdin: "{{ _irods_admin_password }}"
      register: results
      changed_when: results.stdout == 'scheduled trash removal'
  

