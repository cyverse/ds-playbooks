---
- name: Run-time initialization
  hosts: irods_catalog
  become: "{{ _become_svc_acnt }}"
  become_user: "{{ _irods_service_account_name }}"
  run_once: true
  tasks:
    - name: Ensure service user type exists
      irods_user_type:
        type: ds-service
        description: a Data Store service

    - name: Ensure public group's home is correct
      become: false
      delegate_to: localhost
      irods_move:
        source: /{{ _irods_zone_name }}/home/public
        destination: /{{ _irods_zone_name }}/home/shared
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Ensure public group's trash is correct
      become: false
      delegate_to: localhost
      irods_move:
        source: /{{ _irods_zone_name }}/trash/home/public
        destination: /{{ _irods_zone_name }}/trash/home/shared
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Ensure CyVerse curated collection base collection exists
      become: false
      delegate_to: localhost
      irods_collection:
        path: /{{ _irods_zone_name }}/home/shared/commons_repo/curated
        parents: true
        state: present
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Force initialize perms when not testing
      ansible.builtin.set_fact:
        init_rodsadmin_perms_default: true
      tags:
        - no_testing

    - name: Initialize rodsadmin perms
      ansible.builtin.script: >-
        scripts/init-rodsadmin-perms.sh \
          '{{ groups["dbms_primary"][0] }}' \
          postgres \
          '{{ hostvars[groups["dbms_primary"][0]]["ansible_port"] | d(22) }}' \
          '{{ hostvars[groups["dbms_primary"][0]]["ansible_user"] | d("root") }}' \
          '{{ groups["irods_catalog"][0] }}' \
          '{{ hostvars[groups["irods_catalog"][0]]["_irods_service_account_name"] }}' \
          '{{ hostvars[groups["irods_catalog"][0]]["ansible_port"] | d(22) }}' \
          '{{ hostvars[groups["irods_catalog"][0]]["ansible_user"] | d("root") }}' \
          '{{ _irods_zone_name }}'
      register: response
      changed_when: response.stdout == 'true'
      delegate_to: localhost
      become: false
      when: init_rodsadmin_perms | d(init_rodsadmin_perms_default | d(false))

    - name: Ensure anonymous user exists
      delegate_to: localhost
      become: false
      irods_user:
        name: anonymous
        password: ''
        state: present
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Ensure anonymous user has read access to required collections
      delegate_to: localhost
      become: false
      no_log: true
      irods_permission:
        subject: anonymous
        permission: read
        object: "{{ item }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"
      with_items:
        - /{{ _irods_zone_name }}
        - /{{ _irods_zone_name }}/home
        - /{{ _irods_zone_name }}/home/shared
        - /{{ _irods_zone_name }}/home/shared/commons_repo/curated

    - name: Remove _ipc_* rules
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o errexit
          res="$(iquest '%s' "select RULE_EXEC_ID where RULE_EXEC_NAME = '{{ item }}'")"
          if [[ -z "$res" ]]; then
            exit 1
          elif [[ "$res" =~ CAT_NO_ROWS_FOUND: ]]; then
            exit 0
          fi
          readarray -t ids <<< "$res"
          iqdel "${ids[@]}"
          echo changed
      register: response
      changed_when: response.stdout == 'changed'
      with_items:
        - _ipc_determineAllStorageFreeSpace
        - _ipc_rmTrash
        - _ipc_updateQuotaUsage

    - name: Start quota usage computation
      ansible.builtin.command: >
        irule --rule-engine-plugin-instance=irods_rule_engine_plugin-irods_rule_language-instance
          cyverse_housekeeping_rescheduleQuotaUsageUpdate null ruleExecOut
      register: results
      changed_when: results.stdout == 'scheduled quota usage updates'

    - name: Start storage free space determination
      ansible.builtin.command: >
        irule --rule-engine-plugin-instance=irods_rule_engine_plugin-irods_rule_language-instance
          cyverse_housekeeping_rescheduleStorageFreeSpaceDetermination null ruleExecOut
      register: results
      changed_when: results.stdout == 'scheduled storage determination'

    - name: Start trash removal
      ansible.builtin.command: >
        irule --rule-engine-plugin-instance=irods_rule_engine_plugin-irods_rule_language-instance
          cyverse_housekeeping_rescheduleTrashRemoval null ruleExecOut
      register: results
      changed_when: results.stdout == 'scheduled trash removal'
