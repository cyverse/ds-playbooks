#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright: Â© 2021, The Arizona Board of Regents
# Standard BSD License | CyVerse (see https://cyverse.org/license)

"""ansible module for starting and stopping iRODS service"""

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community"
}

# An ansible module for executing irodsctl, i.e., controling the state of an
# iRODS server.
#
# Module Name:
#  irods_ctl
#
# Optional Variables:
#  state  The state irods-server should be in upon success. It should be one of
#         'restarted', 'started', or 'stopped'. The default is 'started'.

from subprocess import PIPE, Popen

from ansible.module_utils.basic import AnsibleModule


def _call_irodsctl(arg):
    cmd = Popen(args=["/var/lib/irods/irodsctl", arg], stdout=PIPE, stderr=PIPE)
    (resp, err) = cmd.communicate()

    if cmd.returncode != 0:
        raise Exception(err)
    return resp


def _is_running():
    status = str(_call_irodsctl("status"))
    return "No iRODS servers running" not in status


def _ensure_started():
    if not _is_running():
        _call_irodsctl("start")
        return True
    else:
        return False


def _ensure_stopped():
    if _is_running():
        _call_irodsctl("stop")
        return True
    else:
        return False


def _restart():
    if _is_running():
        _call_irodsctl("restart")
    else:
        _call_irodsctl("start")

    return True


def _ensure_state(state):
    return {
        'restarted' : _restart,
        'started'   : _ensure_started,
        'stopped'   : _ensure_stopped,
    }[state]()


def main():
    module = AnsibleModule(
        argument_spec = dict(
            state = dict(
                type='str',
                choices=["restarted","started","stopped"],
                default="started")))

    try:
        module.exit_json(params=module.params, changed=_ensure_state(module.params['state']))
    except Exception as e:
        module.fail_json(msg=str(e))


if __name__ == '__main__':
    main()
