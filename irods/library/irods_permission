#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Provides an ansible module for creating and removing iRODS collection.
"""

import itertools
import ssl
from os.path import basename, dirname
from ansible.module_utils.basic import AnsibleModule

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community"}

DOCUMENTATION = """
---
module: irods_permission

short_description: Set/Remove iRODS ACL

version_added: "2.9"

description:
    - Set iRODS ACL
    - Remove iRODS ACL

options:
    subject:
        description:
            - recipient of the permission
        required: true
        type: str
    permission:
        description:
            - type of permission to apply
        choices:
            - null
            - read
            - write
            - own
        required: true
        type: str
    object:
        description:
            - target of the permission
            - object could be an iRODS collection or a data object
        required: true
        type: str
    recursive:
        description: >
          whether or not the subject should be granted the same permission on
          everything in the collection.

          object must be a collection
        required: false
        type: bool
    subject_zone:
        description:
            - zone of the recipient of the permission
            - default to the value of zone field
        required: false
        type: str
    host:
        description:
            - Hostname of the iRODS server
        required: true
        type: str
    port:
        description:
            - Port of the iRODS server
        required: true
        type: int
    admin_user:
        description:
            - Username of the admin user
        required: true
        type: str
    admin_password:
        description:
            - Password of the admin user
        required: true
        type: str
    zone:
        description:
            - Zone of the admin user
        required: true
        type: str

requirements:
    - python-irodsclient>=0.8.2

author:
    - John Xu
"""

EXAMPLES = """
- name: ensure anonymous user has read access to required collections
  irods_permission:
    subject: anonymous
    permission: read
    object: /tempZone/home/test_collection
    host: cyverse.org
    port: 1247
    admin_user: rods
    admin_password: 1234
    zone: tempZone

- name: give ownership of a collection to a user
  irods_permission:
    subject: test_user123
    permission: own
    object: /tempZone/home/test_collection
    host: cyverse.org
    port: 1247
    admin_user: rods
    admin_password: 1234
    zone: tempZone
"""

RETURN = """
perm_before:
  description: >
    permission user(subject) has on the object before the module has run.

    null if user has no permission

    only shows permission of the object itself not its members even with
    recursive option
  type: str
  returned: always
perm_after:
  description: >
    permission user(subject) has on the object after the module has run

    null if user has no permission

    only shows permission of the object itself not its members even with
    recursive option
  type: str
  returned: always
exc:
    description:
        - type of last iRODS exception thrown
        - empty string when none is thrown
    type: str
    returned: always
exc_msg:
    description:
        - message of the last iRODS exception thrown
        - empty string when none is thrown
    type: str
    returned: always
"""

try:
    USE_IRODS_CLIENT = True
    from irods.session import iRODSSession
    from irods.models import DataObject, DataAccess, User
    from irods.models import Collection, CollectionAccess, CollectionUser
    from irods.access import iRODSAccess
    from irods.exception import DataObjectDoesNotExist
    from irods.column import Like
except ImportError:
    USE_IRODS_CLIENT = False


class IRODSPermissionModule:
    """
    Module class
    """

    def __init__(self):
        """
        Initialize the module
        """
        # define argument
        self.module_args = {
            "subject": {
                "type": "str",
                "required": True},
            "permission": {
                "type": "str",
                "required": True,
                "choices": ["null", "read", "write", "own"] },
            "object": {
                "type": "str",
                "required": True },
            "recursive": {
                "type": "bool",
                "required": False,
                "default": False },
            "subject_zone": {
                "type": "str",
                "required": False },
            "host": {
                "type": "str",
                "required": True },
            "port": {
                "type": "int",
                "required": True },
            "admin_user": {
                "type": "str",
                "no_log": True,
                "required": True },
            "admin_password": {
                "type": "str",
                "no_log": True,
                "required": True },
            "zone": {
                "type": "str",
                "required": True } }
        # result
        self.result = {
            "changed": False,
            "exc": "",
            "exc_msg": "",
            "perm_before": [],
            "perm_after": [] }

        # init module
        self.module = AnsibleModule(
            argument_spec=self.module_args, supports_check_mode=True)

        self.session = None

        self.perm_str_mapping = {
            "read object": "read",
            "modify object": "write",
            "own": "own"}
        self.perm_str_reverse_map = {
            "read": "read object",
            "write": "modify object",
            "own": "own"}

    def run(self):
        """
        Entry point for module class, method to be called to run the module
        """
        # check param and env
        self.sanity_check()

        # only-check mode
        if self.module.check_mode:
            self.module.exit_json(**self.result)
            return

        self.init_session()

        action = self._select_action()
        action()

    def _fail(self, msg, err=None):
        """
        Failure routine, called when the operation failed
        """
        if self.session:
            self.session.cleanup()

        if err:
            self.module.fail_json(msg=msg + "\n" + str(err), **self.result)
        else:
            self.module.fail_json(msg=msg, **self.result)

    def _success(self, msg=""):
        """
        Success routine, called when the operation succeeds
        """
        if msg:
            self.result["message"] = msg
        self.module.exit_json(**self.result)

    def sanity_check(self):
        """
        Check if python-irodsclient is installed
        """
        # python-irodsclient is required at this point
        if not USE_IRODS_CLIENT:
            self._fail("python-irodsclient not installed")

    def init_session(self):
        """
        Initialize the iRODS session with iRODS server
        """
        ssl_context = ssl.create_default_context(
            purpose=ssl.Purpose.SERVER_AUTH,
            cafile=None,
            capath=None,
            cadata=None)
        ssl_settings = {"ssl_context": ssl_context}
        self.session = iRODSSession(
            host=self.module.params["host"],
            port=self.module.params["port"],
            user=self.module.params["admin_user"],
            password=self.module.params["admin_password"],
            zone=self.module.params["zone"],
            **ssl_settings)

    def _select_action(self):
        """
        Dispatch action according to the argument passed to the module
        """
        if self.module.params["permission"] == "null":
            return self.permission_absent
        if self.module.params["recursive"]:
            return self.permission_present_recursive
        return self.permission_present

    # TODO convert this to class
    def permission_absent(self):
        """
        Ensure the permission on the object with given subject is absent
        """
        # fetch object at the path
        path = self.module.params["object"]
        username = self.module.params["subject"]
        recursive = self.module.params["recursive"]
        subject_zone = self.module.params["subject_zone"]
        if not subject_zone:
            subject_zone = self.module.params["zone"]

        # get existing permission of the object
        obj_type = self._object_type(path)
        if not obj_type:
            self._fail("Object does not exist")
        permission = self._get_permission(obj_type, path, username)
        self.result["perm_before"] = permission

        if recursive and obj_type != Collection:
            self._fail("recursive option can only be used on collection")

        # remove permission if exists
        if (
            recursive
            and not self._check_null_permission_recursive(path, username)
        ):
            self._set_permission(
                path, "null", username, recursive=True, user_zone=subject_zone)
            self.result["changed"] = True
        elif not recursive and permission:
            self._set_permission(
                path, "null", username, user_zone=subject_zone)
            self.result["changed"] = True
        self.result["perm_after"] = self._get_permission(
            obj_type, path, username)
        self._success("permission is absent")

    # TODO convert this to class
    def permission_present(self):
        """
        Ensure the specified permission on the object with given subject is
        present
        """
        # fetch object at the path
        path = self.module.params["object"]
        target_perm = self.module.params["permission"]
        username = self.module.params["subject"]
        subject_zone = self.module.params["subject_zone"]
        if not subject_zone:
            subject_zone = self.module.params["zone"]

        # get existing permission of the object
        obj_type = self._object_type(path)
        if not obj_type:
            self._fail("Object does not exist")
        permission = self._get_permission(obj_type, path, username)
        self.result["perm_before"] = permission

        # set permission if different
        # or if recursive option is set
        if _permission_diff(permission, [target_perm]):
            self._set_permission(
                path, target_perm, username, user_zone=subject_zone)
            self.result["changed"] = True
        self.result["perm_after"] = self._get_permission(
            obj_type, path, username)
        self._success("permission is present")

    # TODO convert this to class
    def permission_present_recursive(self):
        """
        Ensure the target permission on the collection and its members is
        present
        """
        # fetch object at the path
        path = self.module.params["object"]
        target_perm = self.module.params["permission"]
        username = self.module.params["subject"]
        recursive = self.module.params["recursive"]
        subject_zone = self.module.params["subject_zone"]
        if not subject_zone:
            subject_zone = self.module.params["zone"]

        # get existing permission of the object
        obj_type = self._object_type(path)
        if not obj_type:
            self._fail("Object does not exist")
        permission = self._get_permission(obj_type, path, username)
        self.result["perm_before"] = permission

        if not recursive or obj_type != Collection:
            self._fail("recursive option can only be used on collection")

        if not self._check_permission_recursive(path, username, target_perm):
            self._set_permission(
                path, target_perm, username,
                recursive=recursive, user_zone=subject_zone)
            self.result["changed"] = True
            if (
                not self._check_permission_recursive(
                    path, username, target_perm)
            ):
                self._fail("permission changed after setting permission")
        self.result["perm_after"] = self._get_permission(
            obj_type, path, username)
        self._success("permission is present")

    def _set_permission(
        self, path, perm_str, user, recursive=False, user_zone=""
    ):
        """
        Set permission
        """
        self.session.permissions.set(
            iRODSAccess(perm_str, path, user, user_zone=user_zone),
            recursive=recursive)

    def _get_permission(self, obj_type, path, username):
        """
        Get all permission on the given object for the given user

        Args:
            obj (iRODSCollection|iRODSDataObject): a iRODS object, either a
                collection or a data object
            username (str): username to look up permission for

        Returns:
            list(str): list of permission string ('read' | 'write' | 'own'),
                empty list if no permission
        """
        if obj_type == Collection:
            query = self.session.query(Collection, CollectionAccess).filter(
                CollectionUser.name == username, Collection.name == path)
            result = [self.perm_str_mapping[row[CollectionAccess.name]] for row in query]
            return result
        if obj_type == DataObject:
            conditions = [
                Collection.name == dirname(path),
                DataObject.name == basename(path),
                User.name == username]
            query = (
                self.session.query(DataObject.name, DataAccess.name)
                .filter(*conditions)
                .all())
            result = [
                self.perm_str_mapping[row[DataAccess.name]] for row in query]
            return result
        self._fail("Unsupported Object type")
        return None

    def _check_null_permission_recursive(self, coll_path, perm_subject):
        """
        Recursively check permission for a collection and its member on a
        given subject are absent(null)

        Args:
            coll_path (str): path to the collection
            perm_subject (str): name of the recipient of the permission

        Returns:
            bool: True if subject's permission on the collection are absent,
                False otherwise
        """
        query = self.session.query(User.id).filter(User.name == perm_subject)
        perm_subj_id = query.first()[User.id]

        # check the number of related collections that subject has access to
        coll_obj_query = self.session.query(CollectionAccess.access_id).filter(
            Like(Collection.name, f"{coll_path}%"))
        coll_obj_query = coll_obj_query.filter(
            CollectionAccess.user_id == perm_subj_id)
        colls_count = len(
            [row[CollectionAccess.access_id] for row in coll_obj_query])
        if colls_count > 0:
            return False

        # check the number of related data objects that subject has access to
        data_obj_query = (
            self.session.query(DataAccess.data_id)
            .filter(Like(Collection.name, f"{coll_path}%"))
            .filter(DataAccess.user_id == perm_subj_id))
        data_obj_count = len(data_obj_query.execute())
        if data_obj_count > 0:
            return False
        return True

    def _check_permission_recursive(self, coll_path, perm_subject, permission):
        """
        Recursively check permission for a collection and its member on a given
        subject are consistent with the target permission

        Args:
            coll_path (str): path to the collection
            perm_subject (str): name of the recipient of the permission
            permission (str): target permission, "read" | "write" | "own",
                cannot be "null"

        Returns:
            bool: True if permission are consistent with target, False
                otherwise
        """
        if permission == "null":
            raise ValueError(
                "permission cannot be null, use other functions instead")
        query = self.session.query(User.id).filter(User.name == perm_subject)
        perm_subj_id = query.first()[User.id]

        # Count all collections
        sub_colls = self.session.query().count(Collection.id).filter(
            Like(Collection.name, f"{coll_path}/%"))
        # 1 parent collection + subcollections
        coll_count = 1 + sub_colls.execute()[0][Collection.id]

        # Count all collections that have correct permission
        base_coll_access = (
            self.session.query().count(Collection.id)
            .filter(Collection.name == coll_path)
            .filter(
                CollectionAccess.name == self.perm_str_reverse_map[permission])
            .filter(CollectionAccess.user_id == perm_subj_id))
        sub_coll_access = (
            self.session.query().count(Collection.id)
            .filter(Like(Collection.name, f"{coll_path}/%"))
            .filter(
                CollectionAccess.name == self.perm_str_reverse_map[permission])
            .filter(CollectionAccess.user_id == perm_subj_id))
        coll_access_count = (
            base_coll_access.execute()[0][Collection.id]
            + sub_coll_access.execute()[0][Collection.id])

        if coll_access_count != coll_count:
            return False

        # find all related data objects
        base_data = self.session.query(DataObject.id).filter(
            Collection.name == coll_path)
        sub_data = self.session.query(DataObject.id).filter(
            Like(Collection.name, f"{coll_path}/%"))
        data_count = 0
        for _ in itertools.chain(base_data, sub_data):
            data_count = data_count + 1

        # find all related data objects that have correct permission
        base_data_access = (
            self.session.query(DataAccess.data_id)
            .filter(Collection.name == coll_path)
            .filter(DataAccess.name == self.perm_str_reverse_map[permission])
            .filter(DataAccess.user_id == perm_subj_id))
        sub_data_access = (
            self.session.query(DataAccess.data_id)
            .filter(Like(Collection.name, f"{coll_path}/%"))
            .filter(DataAccess.name == self.perm_str_reverse_map[permission])
            .filter(DataAccess.user_id == perm_subj_id))
        data_access_count = 0
        for _ in itertools.chain(base_data_access, sub_data_access):
            data_access_count = data_access_count + 1

        if data_access_count != data_count:
            return False

        return True

    def _object_type(self, path):
        """
        Return the object type at given path.
        Object could be type Collection or type DataObject if exists.

        Args:
            path (str): path of the iRODS object

        Returns:
            None|Collection|DataObject: return None if no object found,
                otherwise return type of object
        """
        query = self.session.query(Collection).filter(Collection.name == path)
        if query.first():
            return Collection
        try:
            self.session.data_objects.get(path)
            return DataObject
        except DataObjectDoesNotExist:
            return None


def _permission_diff(perm1, perm2):
    """
    Difference in permission

    Args:
        perm1 ([str]): list of permission string
        perm2 ([str]): list of permission string

    Returns:
        set(str): a set of difference between the two list of permission
            strings
    """
    perm_set1 = set(perm1)
    perm_set2 = set(perm2)
    return perm_set1.symmetric_difference(perm_set2)


def main():
    """
    Entrypoint of the Ansible module
    """
    module = IRODSPermissionModule()
    module.run()


if __name__ == "__main__":
    main()
