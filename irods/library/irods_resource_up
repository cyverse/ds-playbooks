#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Provides irods_resource_up Ansible module"""

import ssl
from ansible.module_utils.basic import AnsibleModule
from irods.session import iRODSSession
from irods.column import Criterion
from irods.models import Resource

DOCUMENTATION = r'''
---
module: irods_resource_up

short_description: Change status of resource and parents to "up"

version added: "2.11.11"

description: >
    An ansible module for changing the status of a resource and
    all of its parents to up.

options:
    resource:
        description:
            - the resource to modify
        required: true
        type: object

requirements:
    - python-irodsclient>=0.8.2

author:
    - Fenn Garnett (@Fennersteel)
'''

EXAMPLE = '''
# Set iRODS resource status to "up"
- name: Set status to "up"
    irods_resource_up:
        resource: ingestRes
        host: cyverse.org
        port: 1247
        admin_user: rods
        admin_password: 1234
        zone: tempZone
'''

RETURN = '''
exc:
    description:
        - type of last iRODS exception thrown
        - empty string when none is thrown
    type: str
    returned: always
exc_msg:
    description:
        - message of the last iRODS exception thrown
        - empty string when none is thrown
    type: str
    returned: always
'''


class IRODSResourceUpModule:
    """
    Module class
    """

    def __init__(self):
        """
        Initialize module
        """

        self.module_args = dict(
            resource=dict(type="str", required=True),
            host=dict(type="str", required=True),
            port=dict(type="int", required=True),
            admin_user=dict(type="str", no_log=True, required=True),
            admin_password=dict(type="str", no_log=True, required=True),
            zone=dict(type="str", required=True)
        )

        self.result = dict(
            changed=False,
            exc="",
            exc_msg="",
        )

        self.module = AnsibleModule(
            argument_spec=self.module_args,
            supports_check_mode=True
        )

        self.ssl_context = ssl.create_default_context(
            purpose=ssl.Purpose.SERVER_AUTH, cafile=None, capath=None,
            cadata=None)

        self.ssl_settings = {"ssl_context": self.ssl_context}

        self.session = None
        self.failed = False

    def _init_session(self):
        try:
            self.session = iRODSSession(
                resource=self.module.params["resource"],
                host=self.module.params["host"],
                port=self.module.params["port"],
                user=self.module.params["admin_user"],
                password=self.module.params["admin_password"],
                zone=self.module.params["zone"],
                **self.ssl_settings)
            return True
        except Exception as exc:  # pylint: disable=broad-except
            self.result["exc"] = str(exc)
            self.result["exc_message"] = "Unable to connect to iRODS."
            self._fail(self.result["exc_message"])
            return False

    def run(self):
        """
        Entry point for module class, method to be called to run the module
        """
        if self.module.check_mode:
            self._succeed()
        elif self._init_session():
            try:
                if self._verify_resource():
                    self._resource_up_recurse(self.module.params['resource'])
                    self._succeed()
            except Exception as exc:  # pylint: disable=broad-except
                self.result["exc"] = exc
                self.result["exc_message"] = \
                    'Unable to fully bring up resource'
                self._fail(str(self.result["exc_message"]))

    def _resource_up(self, resc):
        current_status = self.session.resources.get(resc).status  # pylint: disable=no-member # noqa

        if current_status != "up":
            self.session.resources.modify(resc, "status", "up")
            self.result["changed"] = True

    def _resource_up_recurse(self, resc):
        try:
            self._resource_up(resc)
            parent_id = self.session.resources.get(resc).parent  # pylint: disable=no-member # noqa
            if parent_id:
                results = self.session.query(Resource.name).filter(
                    Criterion('=', Resource.id, parent_id))
                for result in results:
                    self._resource_up_recurse(result[Resource.name])
        except Exception as exc:  # pylint: disable=broad-except
            self.result["exc"] = str(exc)
            self.result["exc_message"] = \
                f"Failed to set status of resource '{resc}' to 'up'"
            self._fail(self.result["exc_message"])

    def _verify_resource(self):
        resc = self.module.params['resource']
        query = self.session.query(Resource).filter(
            Criterion("=", Resource.name, resc))
        if query.execute().length == 0:
            self._fail(f"Resource {resc} does not exist")
            return False
        else:
            return True

    def _fail(self, msg: str, err=None):
        if self.session:
            self.session.cleanup()
        if err:
            self.module.fail_json(msg=msg + "\n" + str(err), **self.result)
        else:
            self.module.fail_json(msg=msg)
        self.failed = True

    def _succeed(self):
        if not self.failed:
            self.module.exit_json(**self.result)


def main():
    """
    Entrypoint of Ansible module
    """
    module = IRODSResourceUpModule()
    module.run()


if __name__ == '__main__':
    main()
