---
- name: Testing irods_permission module
  hosts: irods_catalog
  run_once: true
  become: true
  become_user: irods
  strategy: debug
  vars:
    zone: testing
    password: password
    data: /{{ zone }}/home/rods/data
    coll_no_recursion: /{{ zone }}/home/rods/coll_no_recursion
    sub_data_no_recursion: "{{ coll_no_recursion }}/data"
    sub_coll_no_recursion: "{{ coll_no_recursion }}/coll"
    coll_inclusive: /{{ zone }}/home/rods/coll_inclusive
    sub_data_inclusive: "{{ coll_inclusive }}/data"
    sub_coll_inclusive: "{{ coll_inclusive }}/coll"
    sub_sub_data_inclusive: "{{ sub_coll_inclusive }}/data"
    coll_exclusive: /{{ zone }}/home/rods/coll_exclusive
    sub_data_exclusive: "{{ coll_exclusive }}/data"
    sub_coll_exclusive: "{{ coll_exclusive }}/coll"
  pre_tasks:
    - name: Create remote zone
      ansible.builtin.command: iadmin mkzone other_zone remote
      changed_when: true
      tags: non_idempotent

    - name: Create test users
      ansible.builtin.command: iadmin mkuser '{{ item }}' rodsuser
      changed_when: true
      with_items:
        - forbidden
        - reader
        - writer
        - owner
        - remote_user#other_zone
      tags: non_idempotent

    - name: Create collections
      ansible.builtin.command: imkdir -p '{{ item }}'
      changed_when: true
      with_items:
        - "{{ sub_coll_no_recursion }}"
        - "{{ sub_coll_inclusive }}"
        - "{{ sub_coll_exclusive }}"
      tags: non_idempotent

    - name: Create data object
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          file="$(mktemp)"
          iput -R ingestRes "$file" '{{ item }}'
      changed_when: true
      with_items:
        - "{{ data }}"
        - "{{ sub_data_no_recursion }}"
        - "{{ sub_data_inclusive }}"
        - "{{ sub_sub_data_inclusive }}"
        - "{{ sub_data_exclusive }}"
      tags: non_idempotent

    - name: Grant forbidden read permission on data
      ansible.builtin.command: ichmod -M read forbidden '{{ data }}'
      changed_when: true
      tags: non_idempotent

    - name: Grant forbidden read permission on colls
      ansible.builtin.command: ichmod -M -r read forbidden '{{ item }}'
      changed_when: true
      with_items:
        - "{{ coll_no_recursion }}"
        - "{{ coll_inclusive }}"
        - "{{ coll_exclusive }}"
      tags: non_idempotent

  tasks:
    - name: Remove forbidden permission on data
      irods_permission:
        zone: "{{ zone }}"
        subject: forbidden
        permission: "null"
        object: "{{ data }}"
        admin_user: rods
        admin_password: "{{ password }}"

    - name: Check null/no permission on data
      ansible.builtin.command: ils -A '{{ data }}'
      register: result
      failed_when:
        - result.rc != 0
        - result.stdout is regex('forbidden#' ~ zone ~ ':')
      changed_when: false

    - name: Grant remote_user read permission on data
      irods_permission:
        zone: "{{ zone }}"
        subject: remote_user
        subject_zone: other_zone
        permission: read
        object: "{{ data }}"
        recursion: none
        host: "{{ groups['irods_catalog'][0] }}"
        port: 1247
        admin_user: rods
        admin_password: "{{ password }}"
      become: false
      delegate_to: localhost

    - name: Check read permission on data
      ansible.builtin.command: ils -A '{{ data }}'
      register: result
      failed_when: result.stdout is not regex('remote_user#other_zone:read object')
      changed_when: false

    - name: Grant writer write permission on data
      irods_permission:
        zone: "{{ zone }}"
        subject: writer
        permission: write
        object: "{{ data }}"
        recursion: inclusive
        admin_user: rods
        admin_password: "{{ password }}"

    - name: Check write permission on data
      ansible.builtin.command: ils -A '{{ data }}'
      register: result
      failed_when: result.stdout is not regex('writer#' ~ zone ~ ':modify object')
      changed_when: false

    - name: Grant owner ownership permission on data
      irods_permission:
        zone: "{{ zone }}"
        subject: owner
        permission: own
        object: "{{ data }}"
        admin_user: rods
        admin_password: "{{ password }}"

    - name: Check ownership permission on data
      ansible.builtin.command: ils -A '{{ data }}'
      register: result
      failed_when: result.stdout is not regex('owner#' ~ zone ~ ':own')
      changed_when: false

    - name: Remove forbidden permission on coll_no_recursion (non-recursive)
      irods_permission:
        zone: "{{ zone }}"
        subject: forbidden
        permission: "null"
        object: "{{ coll_no_recursion }}"
        admin_user: rods
        admin_password: "{{ password }}"

    - name: Verify no forbidden permission on coll_no_recursion
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          userId="$(iquest '%s' \
            "select USER_ID where USER_NAME = 'forbidden' and USER_ZONE = '{{ zone }}'" )"
          iquest '%s' \
              "select COLL_ACCESS_NAME
                where COLL_NAME = '{{ coll_no_recursion }}' and COLL_ACCESS_USER_ID = '$userId'" \
            | sed '/CAT_NO_ROWS_FOUND:/d'
      register: result
      failed_when:
        - result.rc != 0
        - result.stdout | length > 0
      changed_when: false

    - name: Verify forbidden read permission on sub_data_no_recursion
      ansible.builtin.command: ils -A '{{ sub_data_no_recursion }}'
      register: result
      failed_when: result.stdout is not regex('forbidden#' ~ zone ~ ':read object')
      changed_when: false

    - name: Verify forbidden read permission on sub_coll_no_recursion
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          userId="$(iquest '%s' \
            "select USER_ID where USER_NAME = 'forbidden' and USER_ZONE = '{{ zone }}'" )"
          iquest '%s' \
            "select COLL_ACCESS_NAME \
              where COLL_NAME = '{{ sub_coll_no_recursion }}' and COLL_ACCESS_USER_ID = '$userId'"
      register: result
      failed_when: result.stdout != 'read object'
      changed_when: false

    - name: Grant reader read permission on coll_no_recursion (non-recursive)
      irods_permission:
        zone: "{{ zone }}"
        subject: reader
        permission: read
        object: "{{ coll_no_recursion }}"
        admin_user: rods
        admin_password: "{{ password }}"

    - name: Verify reader read permission on coll_no_recursion
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          userId="$(iquest '%s' \
            "select USER_ID where USER_NAME = 'reader' and USER_ZONE = '{{ zone }}'" )"
          iquest '%s' \
            "select COLL_ACCESS_NAME
              where COLL_NAME = '{{ coll_no_recursion }}' and COLL_ACCESS_USER_ID = '$userId'"
      register: result
      failed_when: result.stdout != 'read object'
      changed_when: false

    - name: Verify no reader permission on sub_data_no_recursion
      ansible.builtin.command: ils -A '{{ sub_data_no_recursion }}'
      register: result
      failed_when:
        - result.rc != 0
        - result.stdout is regex('reader#' ~ zone ~ ':')
      changed_when: false

    - name: Verify no reader permission on sub_coll_no_recursion
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          userId="$(iquest '%s' \
            "select USER_ID where USER_NAME = 'reader' and USER_ZONE = '{{ zone }}'" )"
          iquest '%s' \
              "select COLL_ACCESS_NAME
                where COLL_NAME = '{{ coll_no_recursion }}' and COLL_ACCESS_USER_ID = '$userId'" \
            | sed '/CAT_NO_ROWS_FOUND:/d'
      register: result
      failed_when:
        - result.rc != 0
        - result.stdout | length > 0
      changed_when: false

    - name: Remove forbidden permission on coll_inclusive (recursive)
      irods_permission:
        zone: "{{ zone }}"
        subject: forbidden
        permission: "null"
        object: "{{ coll_inclusive }}"
        recursion: inclusive
        admin_user: rods
        admin_password: "{{ password }}"

    - name: Verify forbidden has no permissions on anything in coll_inclusive
      ansible.builtin.command: ils -A '{{ item }}'
      register: result
      failed_when:
        - result.rc != 0
        - result.stdout is regex('forbidden#' ~ zone ~ ':')
      changed_when: false
      with_items:
       - "{{ coll_exclusive }}"
       - "{{ sub_coll_exclusive }}"

    - name: Grant reader read permission on coll_inclusive (recursive)
      irods_permission:
        zone: "{{ zone }}"
        subject: reader
        permission: read
        object: "{{ coll_inclusive }}"
        recursion: inclusive
        admin_user: rods
        admin_password: "{{ password }}"

    - name: Verify reader read permission on coll_inclusive collections
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          userId="$(iquest '%s' \
            "select USER_ID where USER_NAME = 'reader' and USER_ZONE = '{{ zone }}'" )"
          iquest '%s' \
            "select COLL_ACCESS_NAME
              where COLL_NAME = '{{ item }}' and COLL_ACCESS_USER_ID = '$userId'"
      register: result
      failed_when: result.stdout != 'read object'
      changed_when: false
      with_items:
        - "{{ coll_inclusive }}"
        - "{{ sub_coll_inclusive }}"

    - name: Verify reader read permission on coll_inclusive data objects
      ansible.builtin.command: ils -A '{{ item }}'
      register: result
      failed_when: result.stdout is not regex('reader#' ~ zone ~ ':')
      changed_when: false
      with_items:
        - "{{ sub_data_inclusive }}"
        - "{{ sub_sub_data_inclusive }}"

    - name: Remove forbidden permission from coll_exclusive
      irods_permission:
        zone: "{{ zone }}"
        subject: forbidden
        permission: "null"
        object: "{{ coll_exclusive }}"
        recursion: exclusive
        admin_user: rods
        admin_password: "{{ password }}"

    - name: Verify forbidden read permission on coll_exclusive
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          userId="$(iquest '%s' \
            "select USER_ID where USER_NAME = 'forbidden' and USER_ZONE = '{{ zone }}'" )"
          iquest '%s' \
            "select COLL_ACCESS_NAME
              where COLL_NAME = '{{ coll_exclusive }}' and COLL_ACCESS_USER_ID = '$userId'"
      register: result
      failed_when: result.stdout != 'read object'
      changed_when: false

    - name: Verify no forbidden permission on coll_exclusive members
      ansible.builtin.command: ils -A '{{ item }}'
      register: response
      failed_when:
        - result.rc != 0
        - result.stdout is regex('forbidden#' ~ zone ~ ':')
      changed_when: false
      with_items:
        - "{{ sub_data_exclusive }}"
        - "{{ sub_coll_exclusive }}"

    - name: Grant reader read permission on coll_exclusive (recursive)
      irods_permission:
        zone: "{{ zone }}"
        subject: reader
        permission: read
        object: "{{ coll_exclusive }}"
        recursion: exclusive
        admin_user: rods
        admin_password: "{{ password }}"

    - name: Verify no reader permission on coll_exclusive
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          userId="$(iquest '%s' \
            "select USER_ID where USER_NAME = 'reader' and USER_ZONE = '{{ zone }}'" )"
          iquest '%s' \
              "select COLL_ACCESS_NAME
                where COLL_NAME = '{{ coll_exclusive }}' and COLL_ACCESS_USER_ID = '$userId'" \
            | sed '/CAT_NO_ROWS_FOUND:/d'
      register: result
      failed_when:
        - result.rc != 0
        - result.stdout | length > 0
      changed_when: false

    - name: Verify reader read permission on sub_data_exclusive
      ansible.builtin.command: ils -A '{{ sub_data_exclusive }}'
      register: result
      failed_when: result.stdout is not regex('reader#' ~ zone ~ ':')
      changed_when: false

    - name: Verify reader read permission on sub_coll_exclusive
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          userId="$(iquest '%s' \
            "select USER_ID where USER_NAME = 'reader' and USER_ZONE = '{{ zone }}'" )"
          iquest '%s' \
            "select COLL_ACCESS_NAME
              where COLL_NAME = '{{ sub_coll_exclusive }}' and COLL_ACCESS_USER_ID = '$userId'"
      register: result
      failed_when: result.stdout != 'read object'
      changed_when: false
