---
- name: Install and configure sftpgo
  hosts: sftp
  strategy: linear
  become: true
  tasks:
    - name: Enable notifcations when not testing
      ansible.builtin.set_fact:
        notifications_enabled: true
      tags:
        - no_testing

    - name: Ensure iRODS user for SFTPGo exists  # noqa: run-once[task]
      delegate_to: localhost
      become: false
      run_once: true
      irods_user:
        name: "{{ _sftpgo_irods_proxy_username }}"
        password: "{{ _sftpgo_irods_proxy_password }}"
        state: present
        type: rodsadmin
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_admin_username }}"
        admin_password: "{{ _irods_admin_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Check if sftpgo is already installed
      ansible.builtin.stat:
        path: /usr/bin/sftpgo
      register: sftpgo_resp

    - name: Check sftpgo version
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          /usr/bin/sftpgo -v | tr '-' ' ' | awk '{print $2}'
      register: sftpgo_version
      when: sftpgo_resp.stat.exists
      changed_when: false

    - name: Check sftpgo service account
      ansible.builtin.command: id sftpgo
      register: sftpgo_account
      failed_when: false
      changed_when: false

    - name: Ensure sftpgo is up-to-date
      when: >-
        (not sftpgo_resp.stat.exists)
        or (sftpgo_account.rc != 0)
        or (sftpgo_version.stdout != '2.4.5')
      block:
        - name: Check if sftpgo service exists
          ansible.builtin.stat:
            path: /usr/lib/systemd/system/sftpgo.service
          register: service_resp
          tags:
            - no_testing

        - name: Stop sftpgo service if running
          ansible.builtin.service:
            name: sftpgo
            state: stopped
          when: service_resp.stat.exists
          tags:
            - no_testing

        - name: Create download dir for sftpgo package
          ansible.builtin.file:
            path: /tmp/sftpgo_setup
            state: directory
            mode: u+rwx

        - name: Download sftpgo package from github and uncompress
          ansible.builtin.unarchive:
            src: https://github.com/cyverse/sftpgo/releases/download/v2.4.5i/sftpgo_amd64_linux_v2.4.5i.tar
            dest: /tmp/sftpgo_setup
            remote_src: true
          notify: Install sftpgo

        - name: Create sftpgo group for a service account
          ansible.builtin.group:
            name: sftpgo
            system: true

        - name: Create sftpgo user for a service account
          ansible.builtin.user:
            name: sftpgo
            shell: /bin/bash
            home: /var/lib/sftpgo
            create_home: false
            system: true
            group: sftpgo

    - name: Check if sftpgo-auth-irods is already installed
      ansible.builtin.stat:
        path: /usr/bin/sftpgo-auth-irods
      register: sftpgo_auth_irods_resp

    - name: Check sftpgo-auth-irods version
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          /usr/bin/sftpgo-auth-irods -v | grep releaseVersion | tr -d '",' | awk '{print $2}'
      register: sftpgo_auth_irods_version
      when: sftpgo_auth_irods_resp.stat.exists
      changed_when: false

    - name: Install SFTPGo iRODS Auth plugin
      when: >-
        (not sftpgo_auth_irods_resp.stat.exists) or (sftpgo_auth_irods_version.stdout != 'v0.1.7')
      block:
        - name: Create download dir for sftpgo-auth-irods package
          ansible.builtin.file:
            path: /tmp/sftpgo_auth_irods_setup
            state: directory
            mode: u+rwx

        - name: Download sftpgo-auth-irods package from github and uncompress
          ansible.builtin.unarchive:
            src: https://github.com/cyverse/sftpgo-auth-irods/releases/download/v0.1.7/sftpgo-auth-irods-v0.1.7-linux-amd64.tar.gz
            dest: /tmp/sftpgo_auth_irods_setup
            remote_src: true
          notify: Install sftpgo-auth-irods

    - name: Create a vault dir
      ansible.builtin.file:
        path: "{{ _sftpgo_vault_dir }}"
        state: directory
        owner: sftpgo
        mode: '0700'

    - name: Create a vault data, backup dir
      ansible.builtin.file:
        path: "{{ _sftpgo_vault_dir }}/{{ item }}"
        state: directory
        owner: sftpgo
        mode: '0700'
      with_items:
        - "data"
        - "backups"

    - name: Create a log dir
      ansible.builtin.file:
        path: /var/log/sftpgo
        state: directory
        owner: sftpgo
        mode: '0755'

    - name: Create a work dir
      ansible.builtin.file:
        path: /var/lib/sftpgo
        state: directory
        owner: sftpgo
        mode: '0750'

    # remove old db file, we don't need old db because we recreate it dynamically
    - name: Remove an old sftpgo.db file
      ansible.builtin.file:
        path: /var/lib/sftpgo/sftpgo.db
        state: absent

    - name: Create a config dir
      ansible.builtin.file:
        path: /etc/sftpgo
        state: directory
        owner: root
        mode: '0755'

    - name: Configure sftpgo
      ansible.builtin.template:
        src: templates/sftp/etc/sftpgo/{{ item }}.j2
        dest: /etc/sftpgo/{{ item }}
        owner: sftpgo
        mode: '0664'
      with_items:
        - "sftpgo.json"
        - "sftpgo.conf"
      notify:
        - Restart sftpgo

    - name: Configure sftpgo black lists
      ansible.builtin.copy:
        src: files/sftp/etc/sftpgo/blacklist.json
        dest: /etc/sftpgo/blacklist.json
        owner: sftpgo
        mode: '0664'
      notify:
        - Restart sftpgo

    - name: Check if there are ssh host_keys on the host
      ansible.builtin.stat:
        path: /etc/ssh
      register: ssh_host_keys_resp

    - name: SSH host keys
      when: ssh_host_keys_resp.stat.exists
      block:
        - name: Checking ecdsa private key
          ansible.builtin.stat:
            path: /etc/ssh/ssh_host_ecdsa_key
          register: ssh_host_keys_ecdsa_priv_resp

        - name: Configure host_keys - ecdsa private key
          ansible.builtin.copy:
            src: /etc/ssh/ssh_host_ecdsa_key
            dest: /var/lib/sftpgo/id_ecdsa
            owner: sftpgo
            mode: '0640'
            remote_src: true
          when: ssh_host_keys_ecdsa_priv_resp.stat.exists

        - name: Checking ecdsa public key
          ansible.builtin.stat:
            path: /etc/ssh/ssh_host_ecdsa_key.pub
          register: ssh_host_keys_ecdsa_pub_resp

        - name: Configure host_keys - ecdsa public key
          ansible.builtin.copy:
            src: /etc/ssh/ssh_host_ecdsa_key.pub
            dest: /var/lib/sftpgo/id_ecdsa.pub
            owner: sftpgo
            mode: '0644'
            remote_src: true
          when: ssh_host_keys_ecdsa_pub_resp.stat.exists

        - name: Checking ed25519 private key
          ansible.builtin.stat:
            path: /etc/ssh/ssh_host_ed25519_key
          register: ssh_host_keys_ed25519_priv_resp

        - name: Configure host_keys - ed25519 private key
          ansible.builtin.copy:
            src: /etc/ssh/ssh_host_ed25519_key
            dest: /var/lib/sftpgo/id_ed25519
            owner: sftpgo
            mode: '0640'
            remote_src: true
          when: ssh_host_keys_ed25519_priv_resp.stat.exists

        - name: Checking ed25519 public key
          ansible.builtin.stat:
            path: /etc/ssh/ssh_host_ed25519_key.pub
          register: ssh_host_keys_ed25519_pub_resp

        - name: Configure host_keys - ed25519 public key
          ansible.builtin.copy:
            src: /etc/ssh/ssh_host_ed25519_key.pub
            dest: /var/lib/sftpgo/id_ed25519.pub
            owner: sftpgo
            mode: '0644'
            remote_src: true
          when: ssh_host_keys_ed25519_pub_resp.stat.exists

        - name: Checking rsa private key
          ansible.builtin.stat:
            path: /etc/ssh/ssh_host_rsa_key
          register: ssh_host_keys_rsa_priv_resp

        - name: Configure host_keys - rsa private key
          ansible.builtin.copy:
            src: /etc/ssh/ssh_host_rsa_key
            dest: /var/lib/sftpgo/id_rsa
            owner: sftpgo
            mode: '0640'
            remote_src: true
          when: ssh_host_keys_rsa_priv_resp.stat.exists

        - name: Checking rsa public key
          ansible.builtin.stat:
            path: /etc/ssh/ssh_host_rsa_key.pub
          register: ssh_host_keys_rsa_pub_resp

        - name: Configure host_keys - rsa public key
          ansible.builtin.copy:
            src: /etc/ssh/ssh_host_rsa_key.pub
            dest: /var/lib/sftpgo/id_rsa.pub
            owner: sftpgo
            mode: '0644'
            remote_src: true
          when: ssh_host_keys_rsa_pub_resp.stat.exists

    - name: Setup sftpgo service
      ansible.builtin.copy:
        src: files/sftp/usr/lib/systemd/system/sftpgo.service
        dest: /usr/lib/systemd/system
        mode: u+r
      notify:
        - Reload systemd
        - Restart sftpgo

    # It updates MOTD by installing a shell script the shell script generates a
    # message for SFTPGo
    - name: Update message of the day
      ansible.builtin.copy:
        src: files/sftp/etc/update-motd.d/99-sftpgo
        dest: /etc/update-motd.d
        mode: '0755'

  handlers:
    - name: Install sftpgo
      ansible.builtin.include_tasks: tasks/sftp_install_sftpgo.yml

    - name: Install sftpgo-auth-irods
      ansible.builtin.copy:
        src: /tmp/sftpgo_auth_irods_setup/sftpgo-auth-irods
        dest: /usr/bin/sftpgo-auth-irods
        owner: root
        group: root
        mode: '0755'
        remote_src: true

    - name: Reload systemd
      when: notifications_enabled | default(false)
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Restart sftpgo
      when: notifications_enabled | default(false)
      ansible.builtin.service:
        name: sftpgo
        state: restarted
