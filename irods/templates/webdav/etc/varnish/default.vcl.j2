vcl 4.0;

import std;

backend default {
    .host = "127.0.0.1";
    .port = "80";
    .first_byte_timeout = 300s;
}

sub vcl_recv {
    # handle PIPE
    # request is restarted from the previous request
    if (req.restarts == 0) {
        # guard against infinite loop
        unset req.http.X-Restart-And-Pipe;
    }
    if (req.http.X-Restart-And-Pipe && req.restarts > 0) {
        return (pipe);
    }

    if (req.method == "PURGE") {
        return (purge);
    }
    if (req.method != "GET" && req.method != "HEAD") {
        return (pass);
    }
    if (req.url ~ "\?([^&]*&)?ticket=") {
        return (pass);
    }
    if (req.http.Cache-Control ~ "(private|no-store)") {
        # do not cache
        return (pass);
    }
    if (req.http.Cache-Control ~ "no-cache" || req.http.Pragma == "no-cache") {
        # invalidate cache
        return (purge);
    }
    return (hash);
}

sub vcl_pipe {
    return (pipe);
}

sub vcl_pass {
    return (fetch);
}

sub vcl_hash {
    hash_data(req.url);
    if (req.http.host) {
        hash_data(req.http.host);
    } else {
        hash_data(server.ip);
    }
    return (lookup);
}

sub vcl_purge {
    if (req.method == "GET") {
        # clear no-cache header
        unset req.http.Cache-Control;
        unset req.http.Pragma;
        return (restart);
    }
    return (synth(200, "Purged"));
}

sub vcl_hit {
    return (deliver);
}

sub vcl_miss {
    return (fetch);
}

sub vcl_deliver {
    # restart the request to use pipe
    # set the request header to use pipe
    # accessing the request header is available here
    # (not available in backend vcl functions)
    if (resp.http.X-Restart-And-Pipe) {
        set req.http.X-Restart-And-Pipe = "1";
        return (restart);
    }

    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
    } else {
        set resp.http.X-Cache = "MISS";
    }
    unset resp.http.X-Varnish;
    return (deliver);
}

sub vcl_backend_fetch {
    # guard against infinite loop
    if (bereq.retries == 0 ) {
        unset bereq.http.X-Restart-And-Pipe;
    }

    return (fetch);
}

sub vcl_backend_response {
    set beresp.ttl = (now - std.time(beresp.http.Last-Modified, now)) * {{ _webdav_cache_ttl_fraction }};

    # need to put 's' to the value to tell this is in seconds
    if (beresp.ttl >= {{ _webdav_cache_max_ttl }}s) {
        set beresp.ttl = {{ _webdav_cache_max_ttl }}s;
    }

    # Determine cache or not
    if (std.integer(beresp.http.Content-Length, 0) > {{ _webdav_cache_max_file_size|int * 1024 * 1024 }}) {
        # this determines how long the file will not be cached
        # raise an error to restart without caching
        set beresp.http.X-Restart-And-Pipe = "1";
        set beresp.ttl = 1s;
        set beresp.grace = 0s;
        set beresp.keep = 0s;
        set beresp.uncacheable = true;
    } else {
        # guard against infinite loop
        unset bereq.http.X-Restart-And-Pipe;
    }

    return (deliver);
}
