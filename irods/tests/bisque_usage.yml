---
- name: Test bisque template default expansion
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../group_vars/all.yml
  vars:
    bisque: "{{ lookup('template', '../templates/bisque.j2') }}"
  tasks:
    - name: Test cfg values set correctly
      ansible.builtin.assert:
        that:
          - bisque is search('\nbisque_admin_user = admin\n')
          - bisque is search('\nbisque_admin_pass = admin\n')


- name: Test bisque template custom expansion
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../group_vars/all.yml
    - group_vars/bisque_opts.yml
  vars:
    bisque: "{{ lookup('template', '../templates/bisque.j2') }}"
  tasks:
    - name: Test .bisque generated correctly
      ansible.builtin.assert:
        that:
          - bisque is search('\nbisque_host = http://localhost.localdomain/\n')
          - bisque is search('\nbisque_admin_user = irods\n')
          - bisque is search('\nbisque_admin_pass = password\n')


- name: Test prepare for bisque_paths
  hosts: irods_catalog
  become: true
  tasks:
    - name: Verify gridsite-clients installed
      ansible.builtin.include_tasks: tasks/test_pkg_installed.yml
      vars:
        pkg: gridsite-clients

    - name: Test ensure /var/log/bisque exists
      ansible.builtin.stat:
        path: /var/log/bisque
      register: response
      failed_when: >-
        not response.stat.exists or
        not response.stat.isdir or
        response.stat.pw_name != 'irods' or
        not response.stat.wusr


- name: Test BisQue command scripts are in place
  hosts: irods_catalog
  tasks:
    - name: Test place .bisque
      ansible.builtin.stat:
        path: /var/lib/irods/.bisque
      register: response
      failed_when: >-
        not response.stat.exists or
        response.stat.pw_name != 'irods' or
        not response.stat.rusr

    - name: Verify that command scripts are in place
      ansible.builtin.stat:
        path: /var/lib/irods/msiExecCmd_bin/bisque_paths.py
      register: response
      failed_when: not response.stat.exists or not response.stat.rusr or not response.stat.xusr
      loop:
        - bisque_paths.py
        - url-encode-path-segments

    - name: Test place BisQue rule logic
      ansible.builtin.stat:
        path: /etc/irods/bisque.re
      register: resp
      failed_when: not resp.stat.exists or not resp.stat.rusr

    - name: Test remove url-encode-path-segments.sh command script
      ansible.builtin.debug:
        msg: TODO implement