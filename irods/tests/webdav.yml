---
- name: test WebDAV config template expansion
  hosts: localhost
  run_once: true
  gather_facts: false
  vars_files:
    - ../group_vars/all.yml
    - group_vars/webdav_cfg.yml
  vars:
    head: "{{ lookup('template', '../templates/webdav/etc/httpd/head.html.j2') }}"
    default_vcl: "{{ lookup('template', '../templates/webdav/etc/varnish/default.vcl.j2') }}"
    purgeman_conf: "{{ lookup('template', '../templates/webdav/etc/purgeman/purgeman.conf.j2') }}"
    varnish_service: >-
      {{ lookup('template', '../templates/webdav/usr/lib/systemd/system/varnish.service.j2') }}
  tasks:
    - name: verify head.html expands correctly
      assert:
        that:
          - head is search('/* Style for the testing/base/ davrods */' | regex_escape)
          - 'head is search(''content: "/testing/base/";'')'

    - name: verify default.vcl expands correctly
      assert:
        that:
          - >-
            default_vcl
            is search(
              'set beresp.ttl = (now - std.time(beresp.http.Last-Modified, now)) * 0.1'
                | regex_escape )
          - default_vcl is search('beresp.ttl >= 86400s' | regex_escape)
          - default_vcl is search('set beresp.ttl = 86400s' | regex_escape)
          - >-
            default_vcl
            is search('if (std.integer(beresp.http.Content-Length, 0) > 10485760)' | regex_escape)

    - name: verify purgeman.conf expands correctly
      assert:
        that:
          - >-
            purgeman_conf
            is search('PURGEMAN_AMQP_HOST=dstesting-amqp-1.dstesting_default' | regex_escape)
          - purgeman_conf is search('PURGEMAN_AMQP_PORT=5672')
          - purgeman_conf is search('PURGEMAN_AMQP_VHOST=/')
          - purgeman_conf is search('PURGEMAN_AMQP_EXCHANGE=irods')
          - purgeman_conf is search('PURGEMAN_AMQP_USERNAME=guest')
          - purgeman_conf is search('PURGEMAN_AMQP_PASSWORD=guest')

    - name: verify remainder fo purgeman.conf expands correctly
      debug:
        msg: TODO check {{ item }}
      with_items:
        - PURGEMAN_IRODS_HOST
        - PURGEMAN_IRODS_PORT
        - PURGEMAN_IRODS_USERNAME
        - PURGEMAN_IRODS_PASSWORD
        - PURGEMAN_IRODS_ZONE
        - PURGEMAN_VARNISH_URLS

    - name: verify varnish.service expands correctly
      assert:
        that:
          - varnish_service is search('-a :6081,HTTP')
          - >-
            varnish_service
            is search('-s file,/var/cache/varnish/varnish_cache.bin,1000M' | regex_escape)

- name: test WebDAV dav html template expansion
  hosts: localhost
  run_once: true
  gather_facts: false
  vars_files:
    - ../group_vars/all.yml
    - group_vars/webdav_dav.yml
  vars:
    index: "{{ lookup('template', '../templates/webdav/var/index.html.j2') }}"
    zone_index: "{{ lookup('template', '../templates/webdav/var/zone-index.html.j2') }}"
    commons_index: "{{ lookup('template', '../templates/webdav/var/commons-index.html.j2') }}"
  tasks:
    - name: verify index.html expands correctly, part 1
      assert:
        that:
          - index is search('<title>WebDAV Service Landing Page</title>')
          - index is search('Data Store WebDAV Access')
          - index is search('WebDAV services. If a')
          - >-
            index
            is search(
              '<a href="testing/commons/community_released/">testing/commons/community_released/</a>'
            )
          - index
            is search(
            '<a href="testing/commons/cyverse_curated/">testing/commons/cyverse_curated/</a>' )
          - index is search('<a href="testing/projects/">testing/projects/</a>')
          - index is search('<a href="testing/home/">testing/home/</a>')
          - index is search('accessible without authentication.')

    - name: verify index.html expands correctly, part 2
      assert:
        that: index is not search('has four anonymous, read-only')

    - name: verify zone/index.html expands correctly
      assert:
        that:
          - zone_index is search('<title>Index of /testing on testing</title>')
          - zone_index is search('<base href="/dav/testing/"/>')
          - zone_index is search('<a href="/dav/">/</a>')
          - zone_index is search('<a href="/dav/testing/">testing/</a>')
          - zone_index is search('<span class="zone-name">testing</span>')
          - zone_index is search('<a href="home/">home/</a>')

    - name: verify zone/commons/index.html expands correctly
      assert:
        that:
          - commons_index is search('<title>Index of /testing/commons/ on testing</title>')
          - commons_index is search('<base href="/dav/testing/commons/"/>')
          - commons_index is search('<a href="/dav/">/</a>')
          - commons_index is search('<a href="/dav/testing/">testing/</a>')
          - commons_index is search('<a href="/dav/testing/commons/">commons/</a>')
          - commons_index is search('<span class="zone-name">testing</span>')

- name: test WebDAV dav-anon html template expansion
  hosts: localhost
  run_once: true
  gather_facts: false
  vars_files:
    - ../group_vars/all.yml
    - group_vars/webdav_dav_anon.yml
  vars:
    index: "{{ lookup('template', '../templates/webdav/var/index.html.j2') }}"
    zone_index: "{{ lookup('template', '../templates/webdav/var/zone-index.html.j2') }}"
    commons_index: "{{ lookup('template', '../templates/webdav/var/commons-index.html.j2') }}"
  tasks:
    - name: verify index.html expands correctly, part 1
      assert:
        that:
          - index is search('<title>Anonymous WebDAV Service Landing Page</title>')
          - index is search('Data Store Anonymous, Read-Only')
          - index is search('has four anonymous, read-only')
          - index is search('testing/home/')
          - index is search('be accessible.')

    - name: verify index.html expands correctly, part 2
      assert:
        that:
          - index is not search('WebDAV services. If a')
          - index is not search('<a href="testing/home/">testing/home/</a>')

    - name: verify zone/index.html expands correctly, part 1
      assert:
        that:
          - zone_index is search('<base href="/dav-anon/testing/"/>')
          - zone_index is search('<a href="/dav-anon/">/</a>')
          - zone_index is search('<a href="/dav-anon/testing/">testing/</a>')

    - name: verify zone/index.html expands correctly, part 2
      assert:
        that: zone_index is not search('<a href="home/">home/</a>')

    - name: verify zone/commons/index.html expands correctly
      assert:
        that:
          - commons_index is search('<base href="/dav-anon/testing/commons/"/>')
          - commons_index is search('<a href="/dav-anon/">/</a>')
          - commons_index is search('<a href="/dav-anon/testing/">testing/</a>')
          - commons_index is search('<a href="/dav-anon/testing/commons/">commons/</a>')

- name: test WebDAV server deposition
  hosts: webdav
  become: true
  tasks:
    - name: test place TLS certificate chain file
      debug:
        msg: TODO implement

    - name: test place TLS certificate file
      debug:
        msg: TODO implement

    - name: test place TLS key file
      debug:
        msg: TODO implement

    - include_tasks: tasks/test_pkg_installed.yml
      with_items:
        - davrods
        - mod_proxy_html
        - mod_qos
        - mod_ssl
        - yum-plugin-versionlock
      loop_control:
        loop_var: pkg

    - name: test install iRODS package repository signing key
      shell: |
        set -o pipefail
        rpm --query --queryformat='%{SUMMARY}\n' gpg-pubkey | grep --quiet 'iRODS Consortium'
      changed_when: false

    - name: test install iRODS repository
      stat:
        path: /etc/yum.repos.d/renci-irods.yum.repo
      register: resp
      failed_when: not resp.stat.exists

    - name: test lock irods-runtime to version 4.2.8
      shell: |
        set -o pipefail
        if ! yum versionlock status | grep --quiet irods-runtime; then
          printf 'irods-runtime not locked\n' >&2
          exit 1
        elif info="$(yum --quiet list installed irods-runtime | tail --lines=+2)"; then
          readarray -t versions <<< "$info"
          for version in "${versions[@]}"; do
            read _ verNum _ <<< "$version"
            if ! [[ "$verNum" =~ 4\.2\.8 ]]; then
              printf 'found version %s\n' "$verNum" >&2
              exit 1
            fi
          done
        fi
      changed_when: false

    - name: test ssl.conf is gone
      stat:
        path: /etc/httpd/conf.d/ssl.conf
      register: response
      failed_when: response.stat.exists

    - name: test add davrods irods directory contents
      stat:
        path: /etc/httpd/irods/{{ item }}
      with_items:
        - home-head.html
        - projects-head.html
        - community-head.html
        - curated-head.html
        - irods_environment.json
      register: response
      failed_when: not response.stat.exists

    - name: test apache modules
      stat:
        path: /etc/httpd/conf.modules.d/{{ item }}
      with_items:
        - 00-mpm.conf
        - 00-status.conf
        - 10-mod_qos.conf
      register: response
      failed_when: not response.stat.exists

    - name: retrieve encoded irods_environment.json
      slurp:
        src: /etc/httpd/irods/irods_environment.json
      register: ie_encoded

    - name: decode irods_environment.json
      set_fact:
        irods_environment: "{{ ie_encoded.content | b64decode }}"

    - name: test irods_environment.json contents
      assert:
        that:
          - irods_environment.irods_home == '/testing'
          - irods_environment.irods_host == 'dstesting-provider_configured-1.dstesting_default'
          - irods_environment.irods_user_name == 'anonymous'
          - irods_environment.irods_zone_name == 'testing'

    - name: test create content directories
      stat:
        path: /var/www/html/dav/testing/commons
      register: response
      failed_when: not (response.stat.exists and response.stat.isdir)

    - name: test add web pages
      stat:
        path: /var/www/html/{{ item }}
      with_items:
        - index.html
        - robots.txt
        - dav/index.html
        - dav/testing/index.html
        - dav/testing/commons/index.html
        - dav-anon/index.html
        - dav-anon/testing/index.html
        - dav-anon/testing/commons/index.html
      register: response
      failed_when: not response.stat.exists

    - include_tasks: tasks/test_pkg_installed.yml
      vars:
        pkg: varnish
        version: "6.5.1"

    - name: test create varnish shared memory mount point
      stat:
        path: /var/lib/varnish
      register: response
      failed_when: >-
        not response.stat.exists or
        not response.stat.isdir or
        response.stat.mode != '0777'

    - name: test create directory for cache
      stat:
        path: /cache_vol
      register: response
      failed_when: >-
        not response.stat.exists or
        not response.stat.isdir or
        response.stat.pw_name != 'varnish' or
        response.stat.gr_name != 'varnish' or
        response.stat.mode != '0755'

    - name: test create directory for varnish log
      stat:
        path: /var/log/varnish
      register: response
      failed_when: >-
        not response.stat.exists or
        not response.stat.isdir or
        response.stat.pw_name != 'varnishlog' or
        response.stat.gr_name != 'varnish' or
        response.stat.mode != '0755'

    - name: test default.vcl deployed
      stat:
        path: /etc/varnish/default.vcl
      register: response
      failed_when: not response.stat.exists

    - name: test varnish.service deployed
      stat:
        path: /usr/lib/systemd/system/varnish.service
      register: response
      failed_when: not response.stat.exists

    - name: test create apache systemd service dependencies directory
      stat:
        path: /etc/systemd/system/httpd.service.requires
      register: response
      failed_when: not response.stat.exists or not response.stat.isdir

    - name: test ensure varnish runs when apache run
      stat:
        path: /etc/systemd/system/httpd.service.requires/varnish.service
      register: response
      failed_when: >-
        not response.stat.exists or
        not response.stat.islnk or
        response.stat.lnk_source != '/usr/lib/systemd/system/varnish.service'

    - name: test create varnish systemd service dependencies directory
      stat:
        path: /etc/systemd/system/varnish.service.requires
      register: response
      failed_when: not response.stat.exists or not response.stat.isdir

    - name: test ensure varnishncsa runs when varnish run
      stat:
        path: /etc/systemd/system/varnish.service.requires/varnishncsa.service
      register: response
      failed_when: >
        not response.stat.exists or
        not response.stat.islnk or
        response.stat.lnk_source != '/usr/lib/systemd/system/varnishncsa.service'

    - name: test purgeman installed
      stat:
        path: /usr/bin/purgeman
      register: response
      failed_when: not response.stat.exists

    - name: test purgeman.conf deployed
      stat:
        path: /etc/purgeman/purgeman.conf
      register: response
      failed_when: not response.stat.exists

    - name: test purgeman.service deployed
      stat:
        path: /usr/lib/systemd/system/purgeman.service
      register: response
      failed_when: not response.stat.exists

    - name: test ensure purgeman runs when varnish run
      stat:
        path: /etc/systemd/system/varnish.service.requires/purgeman.service
      register: response
      failed_when: >
        not response.stat.exists or
        not response.stat.islnk or
        response.stat.lnk_source != '/usr/lib/systemd/system/purgeman.service'

    - name: test open HTTP connection in firewall
      script: scripts/check-apache-iptables.awk /etc/sysconfig/iptables
      changed_when: false
