---
- name: Install and configure apache
  hosts: webdav
  become: true
  roles:
    - role: geerlingguy.apache
      vars:
        apache_global_vhost_settings: |
          <IfModule !log_forensic_module>
            LoadModule log_forensic_module modules/mod_log_forensic.so
          </IfModule>

          <IfModule !proxy_html_module>
            LoadModule proxy_html_module modules/mod_proxy_html.so
          </IfModule>

          <IfModule !sed_module>
            LoadModule sed_module modules/mod_sed.so
          </IfModule>

          <IfModule !unique_id_module>
            LoadModule unique_id_module modules/mod_unique_id.so
          </IfModule>

          <IfModule mpm_worker_module>
            ServerLimit             {{ _webdav_server_limit }}
            ThreadsPerChild         {{ _webdav_threads_per_child }}
            MaxRequestWorkers       {{ _webdav_max_request_workers }}
          </IfModule>

          QS_ErrorResponseCode 429

          ForensicLog logs/forensic_log
          ErrorLogFormat "%{cu}t %-L [pid %P] [%-m:%l] %-a %E: %M"

          Listen 443 https

          SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog
          SSLRandomSeed connect builtin
          SSLRandomSeed startup file:/dev/urandom 256
          SSLSessionCache shmcb:/run/httpd/sslcache(512000)

          ProxyErrorOverride On
          ProxyHTMLEnable On
          ProxyHTMLLinks a href
          ProxyHTMLLinks base href
        apache_vhosts:
          - servername: "{{ _webdav_canonical_hostname }}"
            extra_parameters: |
              ServerAlias {{ inventory_hostname }}

              ErrorLog logs/http_error_log
              CustomLog logs/http_request_log {{ '"%{%Y-%m-%d %T}t.%{usec_frac}t %a \"%r\" %>s %L %{forensic-id}n"' }}
              LogLevel warn

              RedirectPermanent / https://{{ _webdav_canonical_hostname }}/
            comment: Redirect HTTP to HTTPS
          - servername: "{{ _webdav_canonical_hostname }}"
            listen_ip: 127.0.0.1
            extra_parameters: |
              {% if _webdav_davrods_access_limit %}
              QS_LocRequestLimit /dav {{ _webdav_davrods_access_limit }}
              {% endif %}

              ErrorLog logs/error_log
              CustomLog logs/access_log {{ '"%{%Y-%m-%d %T}t.%{usec_frac}t %{X-Forwarded-For}i \"%r\" %>s %L %{forensic-id}n"' }}
              LogLevel warn

              Header set Access-Control-Allow-Headers "Range"
              Header set Access-Control-Allow-Methods "GET, HEAD, OPTIONS"
              Header set Access-Control-Allow-Origin "*"

              UseCanonicalName On

              # Redirect dav-anon to dav
              <LocationMatch "/dav-anon/{{ _irods_zone_name }}/((commons/(community_released|cyverse_curated)|home|projects)(/.*)?)" >
                Require expr %{REQUEST_URI} !~ m#^/dav-anon/{{ _irods_zone_name }}/home(/[^/]*/?)?$#

                RequestHeader set Authorization "Basic {{ 'anonymous' | b64encode }}"

                ProxyPassMatch http://127.0.0.1/dav/{{ _irods_zone_name }}/$1 retry=0
                ProxyHTMLURLMap ^((http://)?[^/]*)/dav/ $1/dav-anon/ [R]

                <If "%{REQUEST_METHOD} == 'PROPFIND'">
                  SetOutputFilter Sed
                  OutputSed "s,/dav/,/dav-anon/,g"
                </If>

                Header edit Location ^(.*)/dav $1/dav-anon
              </LocationMatch>
            comment: The WebDAV host
            locations:
              - path: /dav/{{ _irods_zone_name }}/commons/community_released
                comment: Anonymous read-only access to the community released data
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  RedirectPermanent \
                    /dav/{{ _irods_zone_name }}/commons/community_released/commons_repo/curated \
                    /dav/{{ _irods_zone_name }}/commons/cyverse_curated

                  {{ davrods('/' ~ _irods_zone_name ~ '/home/shared', 'community-head.html') }}
              - path: /dav/{{ _irods_zone_name }}/commons/cyverse_curated
                comment: Anonymous read-only access to the data curated by CyVerse
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  {{ davrods('/' ~ _irods_zone_name ~ '/home/shared/commons_repo/curated',
                             'curated-head.html') }}
              - path: /dav/{{ _irods_zone_name }}/home
                comment: Authenticated read-write access to the home collection
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  RedirectPermanent /dav/{{ _irods_zone_name }}/home/shared \
                                    /dav/{{ _irods_zone_name }}/projects

                  {{ davrods('Home', 'home-head.html',
                       [ 'expr %{REQUEST_URI} !~ m#^/dav/' ~ _irods_zone_name ~ '/home(/[^/]*/?)?$# || %{REMOTE_USER} != "anonymous"',
                         'valid-user' ]) }}
              - path: /dav/{{ _irods_zone_name }}/projects
                comment: Authenticated read-write access to the project folders
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  {{ davrods('/' ~ _irods_zone_name ~ '/home/shared', 'projects-head.html',
                       [ 'valid-user' ]) }}
              - path: /server-status
                comment: Service status monitoring
                extra_parameters: |
                  SetHandler server-status
                  Require host localhost
              - path: /server-qos
                comment: Service QOS monitoring
                extra_parameters: |
                  SetHandler qos-viewer
                  Require host localhost

        apache_vhosts_ssl:
          - servername: "{{ _webdav_canonical_hostname }}"
            certificate_file: "{{ _webdav_tls_cert_file }}"
            certificate_key_file: "{{ _webdav_tls_key_file }}"
            certificate_chain_file: "{{ _webdav_tls_chain_file }}"
            extra_parameters: |
              ServerAlias {{ inventory_hostname }}

              {% if _webdav_access_limit %}
              QS_LocRequestLimit /dav {{ _webdav_access_limit }}

              {% endif -%}

              ErrorLog logs/https_error_log
              CustomLog logs/https_request_log {{ '"%{%Y-%m-%d %T}t.%{usec_frac}t %{SSL_PROTOCOL}x %{SSL_CIPHER}x %a \"%r\" %>s %L %{forensic-id}n"' }}
              LogLevel warn

              BrowserMatch "MSIE [2-5]" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0

              <If "%{HTTP:Range} == 'bytes=0-'">
                # Remove the range header if requesting the whole file so that the response will
                # still be cached.
                RequestHeader unset Range
              </If>
              <Elseif "-n %{HTTP:Range}">
                # To prevent davrods from crashing, tell it not to cache partial responses
                # When varnish-cache is configured, this should be commented out for caching
                # RequestHeader merge Cache-Control no-store
              </Elseif>

              RequestHeader edit Destination ^https: http: early

              ProxyPass / http://127.0.0.1:{{ _webdav_varnish_service_port }}/ retry=0 timeout=300
              ProxyHTMLURLMap ^http: https: [R]

              Header edit Location ^http: https:
              Header merge Cache-Control public

              # Disable cache when varnish-cache is configured
              CacheDisable /

              ExpiresActive On

              <Files ~ "\.(cgi|shtml|phtml|php3?)$">
                SSLOptions +StdEnvVars
              </Files>

              <Directory "/var/www/cgi-bin">
                SSLOptions +StdEnvVars
              </Directory>
            comment: >-
              This proxy handles TLS, corrects requests, enables caching, and anonymous access for
              XMLHttpRequests
        apache_vhosts_template: ../../templates/webdav/etc/httpd/conf.d/vhosts.conf.j2
      tags:
        - no_testing

  pre_tasks:
    - name: Enable notifcations when not testing
      ansible.builtin.set_fact:
        notifications_enabled: true
      tags:
        - no_testing

    - name: Place TLS certificate chain file
      when: _webdav_tls_chain | length > 0
      block:
        - name: Create parent directory
          ansible.builtin.file:
            path: "{{ _webdav_tls_chain_file | dirname }}"
            state: directory
            mode: a+rx

        - name: Create file
          ansible.builtin.copy:
            dest: "{{ _webdav_tls_chain_file }}"
            content: "{{ _webdav_tls_chain }}"
            mode: a+r
          notify:
            - Restart httpd

    - name: Place TLS certificate file
      when: _webdav_tls_cert | length > 0
      block:
        - name: Create parent directory
          ansible.builtin.file:
            path: "{{ _webdav_tls_cert_file | dirname }}"
            state: directory
            mode: a+rx

        - name: Create file
          ansible.builtin.copy:
            dest: "{{ _webdav_tls_cert_file }}"
            content: "{{ _webdav_tls_cert }}"
            mode: a+r
          notify:
            - Restart httpd

    - name: Place TLS key file
      when: _webdav_tls_key | length > 0
      block:
        - name: Create parent directory
          ansible.builtin.file:
            path: "{{ _webdav_tls_key_file | dirname }}"
            state: directory
            mode: ug+rx

        - name:  Create file
          ansible.builtin.copy:
            dest: "{{ _webdav_tls_key_file }}"
            content: "{{ _webdav_tls_key }}"
            mode: ug+r
          no_log: true
          notify:
            - Restart httpd

    - name: Install yum versionlock
      ansible.builtin.package:
        name: yum-plugin-versionlock
        state: present

    - name: Install iRODS package repository signing key
      ansible.builtin.rpm_key:
        key: https://packages.irods.org/irods-signing-key.asc

    - name: Install iRODS repository
      ansible.builtin.get_url:
        url: https://packages.irods.org/renci-irods.yum.repo
        dest: /etc/yum.repos.d/renci-irods.yum.repo
        mode: u+r
        timeout: 20

    - name: Force import of GPG key
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          if ! resp="$(yum --assumeyes updateinfo)"; then
            exit 1
          fi
          if [[ "$resp" =~ irods-signing-key ]]; then
            echo changed
          fi
      register: response
      changed_when: response.stdout == 'changed'

    - name: Lock irods-runtime to version 4.2.8
      community.general.yum_versionlock:
        name: irods-runtime-4.2.8
        state: present
# XXX - Due to https://github.com/ansible-collections/community.general/issues/4470, this isn't
# idempotent.
      tags: non_idempotent
# XXX - ^^^

    - name: Package_facts uses auto, setup for next task
      ansible.builtin.package_facts:

    - name: Build & install mod_ssl-rm_ssl_conf RPM package to remove ssl.conf
      ansible.builtin.include_tasks: tasks/install_rm_sslconf_rpm.yml
      when: "'mod_ssl-rm_ssl_conf' not in ansible_facts.packages"

    - name: Install apache modules
      ansible.builtin.package:
        name:
          - mod_proxy_html
          - mod_qos
          - mod_ssl

    - name: Update apache modules
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/httpd/conf.modules.d
        mode: a+r
      with_fileglob:
        - "files/webdav/etc/httpd/conf.modules.d/*"
      notify:
        - Restart httpd

    - name: Install davrods
      ansible.builtin.yum:
        name: https://github.com/UtrechtUniversity/davrods/releases/download/4.2.8_1.5.0/davrods-4.2.8_1.5.0-1.rpm
        state: present

    - name: Configure iRODS environment
      ansible.builtin.include_role:
        name: cyverse.irods_cfg
        tasks_from: client.yml
      vars:
        irods_cfg_environment_file: etc/httpd/irods/irods_environment.json
        irods_cfg_chown: false
        irods_cfg_host: "{{ _canonical_hostname }}"
        irods_cfg_zone_name: "{{ _irods_zone_name }}"
        irods_cfg_zone_user: anonymous
        irods_cfg_home: /{{ _irods_zone_name }}

    - name: Make WebDAV directories for static resources
      ansible.builtin.include_tasks: tasks/mk_webdav_dir_head.yml
      vars:
        head_dav_base: "{{ _irods_zone_name }}/{{ item.base }}"
        head_file: "{{ item.file }}"
      with_items:
        - file: home-head.html
          base: home
        - file: projects-head.html
          base: projects
        - file: community-head.html
          base: commons/community_released
        - file: curated-head.html
          base: commons/cyverse_curated

    - name: Install static WebDAV HTML pages for dav/
      ansible.builtin.include_tasks: tasks/install_webdav_html.yml
      vars:
        svc: dav

    - name: Install static WebDAV HTML pages for dav-anon/
      ansible.builtin.include_tasks: tasks/install_webdav_html.yml
      vars:
        svc: dav-anon

    - name: Add root web page
      ansible.builtin.copy:
        src: files/webdav/var/www/html/index.html
        dest: /var/www/html/index.html
        mode: a+r

    - name: Add robots.txt
      ansible.builtin.copy:
        src: files/webdav/var/www/html/robots.txt
        dest: /var/www/html/robots.txt
        mode: a+r

    - name: Upgrade Varnish
      when:
        - "'varnish' in ansible_facts.packages"
        - ansible_facts.packages['varnish'][0].version is version_compare('6.5.1', '<')
      block:
        - name: Varnish | ensure not running
          ansible.builtin.service:
            name: varnish
            state: stopped

        - name: Varnish | uninstall pre-installed varnish-cache package
          ansible.builtin.package:
            name: varnish
            state: absent

        - name: Varnish | delete stale varnish-cache service file
          ansible.builtin.file:
            path: /etc/systemd/system/varnish.service
            state: absent
          notify: Reload systemd

        # without this, varnishncsa may crash
        - name: Varnish | delete stale varnish-cache log files
          ansible.builtin.file:
            path: /var/log/varnish/
            state: absent

        - name: Varnish | find files in varnish cache dir
          ansible.builtin.find:
            paths: "{{ _webdav_cache_dir }}"
          register: cached_files

        - name: Varnish | delete varnish cache files
          ansible.builtin.file:
            path: "{{ _webdav_cache_dir }}"
            state: absent
          with_items: "{{ cached_files }}"

    - name: Install varnish-cache package (v6.5.1)
      ansible.builtin.yum:
        name: >-
          https://packagecloud.io/varnishcache/varnish65/packages/el/7/varnish-6.5.1-0.0.el7.x86_64.rpm/download.rpm
        state: present

    - name: Create varnish shared memory mount point
      ansible.builtin.file:
        path: /var/lib/varnish
        state: directory
        mode: 0777

    # Varnish creates in-memory log upto 4GB.
    - name: Mount varnish shared memory
      ansible.posix.mount:
        path: /var/lib/varnish
        src: tmpfs
        fstype: tmpfs
        opts: rw,nodev,nosuid,size=4G
        state: mounted
      notify:
        - Restart varnish
      tags:
        - no_testing

    - name: Create a cache dir
      ansible.builtin.file:
        path: "{{ _webdav_cache_dir }}"
        recurse: true
        state: directory
        owner: varnish
        group: varnish
        mode: 0755

    - name: Create a log dir
      ansible.builtin.file:
        path: "/var/log/varnish"
        recurse: true
        state: directory
        owner: varnishlog
        group: varnish
        mode: 0755

    - name: Setup varnish-cache VCL
      ansible.builtin.template:
        src: "templates/webdav/etc/varnish/{{ item }}.j2"
        dest: "/etc/varnish/{{ item }}"
        mode: a+r
      with_items:
        - default.vcl
      notify:
        - Restart varnish
        - Restart varnishncsa

    - name: Setup varnish-cache service
      ansible.builtin.template:
        src: "templates/webdav/usr/lib/systemd/system/{{ item }}.j2"
        dest: "/usr/lib/systemd/system/{{ item }}"
        mode: a+r
      with_items:
        - varnish.service
      notify:
        - Reload systemd
        - Restart varnish
        - Restart varnishncsa

  post_tasks:
    - name: Configure apache log rotation
      ansible.builtin.copy:
        src: files/webdav/etc/logrotate.d/httpd
        dest: /etc/logrotate.d/httpd
        mode: a+r

    - name: Create apache systemd service dependencies directory
      ansible.builtin.file:
        path: /etc/systemd/system/httpd.service.requires
        state: directory
        mode: u+r

    - name: Ensure varnish runs when apache run
      ansible.builtin.file:
        path: /etc/systemd/system/httpd.service.requires/varnish.service
        src: /usr/lib/systemd/system/varnish.service
        state: link

    - name: Create varnish systemd service dependencies directory
      ansible.builtin.file:
        path: /etc/systemd/system/varnish.service.requires
        state: directory
        mode: u+r

    - name: Ensure varnishncsa runs when varnish run
      ansible.builtin.file:
        path: /etc/systemd/system/varnish.service.requires/varnishncsa.service
        src: /usr/lib/systemd/system/varnishncsa.service
        state: link

    - name: Check if purgeman is already installed
      ansible.builtin.stat:
        path: /usr/bin/purgeman
      register: purgeman_resp

    - name: Check purgeman version
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          /usr/bin/purgeman -v | grep 'serviceVersion' | tr -d '",' | awk '{print $2}'
      register: purgeman_version
      when: purgeman_resp.stat.exists
      changed_when: false

    - name: Check purgeman service account
      ansible.builtin.command: id purgeman
      register: purgeman_account
      failed_when: false
      changed_when: false

    - name: Upgrade purgeman
      when: >-
        not purgeman_resp.stat.exists
        or purgeman_account.rc != 0
        or purgeman_version.stdout != 'v0.3.0'
      block:
        - name: Purgeman | check if purgeman service exists
          ansible.builtin.stat:
            path: /usr/lib/systemd/system/purgeman.service
          register: service_resp
          tags:
            - no_testing

        - name: Purgeman | stop service if running
          ansible.builtin.service:
            name: purgeman
            state: stopped
          when: service_resp.stat.exists
          tags:
            - no_testing

        - name: Purgeman | create build dir for package
          ansible.builtin.file:
            path: /tmp/purgeman_setup
            state: directory
            mode: u+rwx

        - name: Purgeman | download new package from github and uncompress
          ansible.builtin.unarchive:
            src: https://github.com/cyverse/purgeman/releases/download/v0.3.0/purgeman_0.3.0.tar.gz
            dest: /tmp/purgeman_setup
            remote_src: true
          register: unarchive_resp

        - name: Purgeman | install purgeman service
          when: unarchive_resp is changed
          community.general.make:
            chdir: /tmp/purgeman_setup
            target: install_centos
          tags: skip_ansible_lint

        - name: Purgeman | delete build dir for purgeman package
          ansible.builtin.file:
            path: /tmp/purgeman_setup
            state: absent

    - name: Configure purgeman
      ansible.builtin.template:
        src: templates/webdav/etc/purgeman/purgeman.conf.j2
        dest: /etc/purgeman/purgeman.conf
        owner: purgeman
        mode: 0660
      notify:
        - Restart purgeman

    - name: Setup purgeman service
      ansible.builtin.copy:
        src: files/webdav/usr/lib/systemd/system/purgeman.service
        dest: /usr/lib/systemd/system/purgeman.service
        mode: u+r
      notify:
        - Reload systemd
        - Restart purgeman

    - name: Ensure purgeman runs when varnish run
      ansible.builtin.file:
        path: /etc/systemd/system/varnish.service.requires/purgeman.service
        src: /usr/lib/systemd/system/purgeman.service
        state: link

    - name: Open HTTP connection in firewall
      ansible.builtin.blockinfile:
        path: /etc/sysconfig/iptables
        insertbefore: -A INPUT -j REJECT
        marker: "# {mark} DS MANAGED BLOCK (webdav)"
        content: |
          {% for i in _webdav_allowed_src %}
          -A INPUT -m state --state NEW -p tcp -s {{ i }} --dport 80 -j ACCEPT
          -A INPUT -m state --state NEW -p tcp -s {{ i }} --dport 443 -j ACCEPT
          {% endfor %}
      tags:
        - firewall
      notify: Reload firewall

  handlers:
    - name: Reload firewall
      when: notifications_enabled | d(false)
      ansible.builtin.service:
        name: iptables
        state: restarted

    - name: Reload systemd
      when: notifications_enabled | d(false)
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Restart httpd
      when: notifications_enabled | d(false)
      ansible.builtin.service:
        name: httpd
        state: restarted

    - name: Restart varnish
      when: notifications_enabled | d(false)
      ansible.builtin.service:
        name: varnish
        state: restarted

    - name: Restart varnishncsa
      when: notifications_enabled | d(false)
      ansible.builtin.service:
        name: varnishncsa
        state: restarted

    - name: Restart purgeman
      when: notifications_enabled | d(false)
      ansible.builtin.service:
        name: purgeman
        state: restarted
