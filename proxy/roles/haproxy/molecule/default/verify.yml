---
- name: Verify | template default expansion
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../../defaults/main.yml
  vars:
    haproxy: "{{ lookup('template', '../../templates/haproxy.cfg.j2') }}"
  tasks:
    - name: Verify haproxy config is ansible managed
      ansible.builtin.assert:
        that: haproxy is search('^#\n# Ansible managed')

    - name: Verify haproxy config global section
      ansible.builtin.assert:
        that:
          - haproxy is search('\nglobal\n(  [^\n]*\n)*  cpu-map +1/1-1 0-0\n')
          - haproxy is search('\nglobal\n(  [^\n]*\n)*  nbthread +1\n')

    - name: Verify haproxy config defaults section
      ansible.builtin.assert:
        that:
          - haproxy is search('\ndefaults\n(  [^\n]*\n)*  maxconn +500\n')
          - haproxy is not search('\ndefaults\n(  [^\n]*\n)*  timeout queue')

    - name: Verify haproxy config stats listener
      ansible.builtin.assert:
        that:
          - haproxy is search('\nlisten stats\n(  [^\n]*\n)*  bind +:8404\n')
          - haproxy is not search('\nlisten stats\n(  [^\n]*\n)*  stats auth')
          - haproxy is not search('\nlisten stats\n(  [^\n]*\n)*  stats realm')

    - name: Verify haproxy config irods_main frontend
      ansible.builtin.assert:
        that: haproxy is search('\nfrontend irods_main\n(  [^\n]*\n)*  bind +:1247\n')

    - name: Verify haproxy config irods_reconn frontend
      ansible.builtin.assert:
        that: haproxy is search('\nfrontend irods_reconn\n(  [^\n]*\n)*  bind +:20000-20199\n')

    - name: Verify haproxy config irods_throttled backend
      ansible.builtin.assert:
        that: haproxy is search('\nbackend irods_throttled\n(  [^\n]*\n)*  server .* maxconn 500\n')

    - name: Verify haproxy config irods_direct backend
      ansible.builtin.assert:
        that: >-
          haproxy
          is search('\nbackend irods_direct\n(..[^\n]*\n)*  server .* 127.0.0.1 * maxconn 500\n' )

    - name: Verify haproxy config sftp listener
      ansible.builtin.assert:
        that:
          - haproxy is search('\nlisten sftp\n(..[^\n]*\n)*  bind * :22\n')
          - >-
            haproxy
            is search('\nlisten sftp\n(..[^\n]*\n)*  server * sftp 127.0.0.1:2022 send-proxy-v2\n')

    - name: Verify haproxy config webdav listener
      ansible.builtin.assert:
        that:
          - haproxy is search('\nlisten webdav\n(..[^\n]*\n)*  bind .* :80,:443\n')
          - haproxy is search('\nlisten webdav\n(..[^\n]*\n)*  server .* 127.0.0.1\n')


- name: Verify | haproxy config template custom expansion
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../../defaults/main.yml
    - vars/custom_haproxy_vars.yml
  vars:
      haproxy: "{{ lookup('template', '../../templates/haproxy.cfg.j2') }}"
  tasks:
    - name: Verify haproxy config global section
      ansible.builtin.assert:
        that:
          - haproxy is search('\nglobal\n(  [^\n]*\n)*  cpu-map +1/1-2 0-1\n')
          - haproxy is search('\nglobal\n(  [^\n]*\n)*  nbthread +2\n')

    - name: Verify haproxy config default section
      ansible.builtin.debug:
        msg: TODO implement

    - name: TODO implement
      ansible.builtin.debug:
        msg: "{{ item }} section tests"
      with_items:
        - STATS
        - IRODS
        - SFTP
        - WEBDAV


- name: Verify | set up HAProxy
  hosts: instance
  tasks:
    - name: Retrieve installed packages
      ansible.builtin.package_facts:
        strategy: all

    - name: Test haproxy installed
      ansible.builtin.fail:
      when: "'haproxy' not in ansible_facts.packages"

    - name: Test install socat
      ansible.builtin.debug:
        msg: TODO implement

    - name: Test allowing proxy to listen on stats port
      ansible.builtin.debug:
        msg: TODO implement

    - name: Test enabling SELinux booleans for proxy
      ansible.builtin.debug:
        msg: TODO implement

    - name: Test change rsyslog.conf block Id to proxy
      ansible.builtin.command: "grep --invert --quiet 'DS MANAGED BLOCK (load_balancer)' /etc/rsyslog.conf"
      changed_when: false

    - name: Test configure rsyslog to listen on UDP socket
      ansible.builtin.shell: |
        printf -v expSettings '$ModLoad imudp\n$UDPServerRun 514\n$UDPServerAddress 127.0.0.1'
        actSettings=$(sed --quiet \
          '/^# BEGIN DS MANAGED BLOCK (haproxy)/{N;N;N;s/^[^\n]*\n//;p}' /etc/rsyslog.conf)
        [[ "$actSettings" = "$expSettings" ]]
      changed_when: false
      args:
        executable: /bin/bash

    - name: Test place rsyslog config for HAProxy
      ansible.builtin.stat:
        path: /etc/rsyslog.d/haproxy.conf
      register: result
      failed_when: not result.stat.exists

    - name: Test place logrotate config for HAProxy
      ansible.builtin.stat:
        path: /etc/logrotate.d/haproxy
      register: result
      failed_when: not result.stat.exists

    - name: Test TLS certificates file
      ansible.builtin.debug:
        msg: TODO implement

    - name: Test VIP list placement
      ansible.builtin.stat:
        path: /etc/haproxy/vip.lst
      register: response
      failed_when: not response.stat.exists or not result.stat.roth

    - name: Test place haproxy config file
      ansible.builtin.debug:
        msg: TODO implement
