{{ ansible_managed | comment }}

##########################
#         GLOBAL         #
##########################

global
  daemon
  chroot         /var/lib/haproxy
  cpu-map        1/1-{{ haproxy_num_threads }} 0-{{ haproxy_num_threads|int - 1 }}
  user           haproxy
  group          haproxy
  log            127.0.0.1 local0 debug
  nbproc         1
  nbthread       {{ haproxy_num_threads }}
  pidfile        /var/run/haproxy.pid
  stats socket   /var/run/haproxy.sock mode 600 level admin
  stats timeout  2m
  unix-bind      mode 770 user haproxy group haproxy

  maxconn                    4000
  spread-checks              2
  tune.ssl.default-dh-param  2048


##########################
#        DEFAULT         #
##########################

defaults
  log                         global
  maxconn                     {{ haproxy_default_max_conn }}
  mode                        tcp
  retries                     3
  timeout client-fin          1m
  timeout client              1d
  timeout server              1d
  timeout server-fin          1m
  timeout connect             10s
{% if haproxy_queue_timeout %}
  timeout queue               {{ haproxy_queue_timeout }}
{% endif %}
  option clitcpka
  option srvtcpka
  option dontlognull
  option log-separate-errors
  option tcplog


##########################
#         STATS          #
##########################

listen stats
  mode                      http
{% if haproxy_stats_tls_crt %}
  bind                      :{{ haproxy_stats_port }} ssl crt {{ haproxy_stats_tls_crt }}
{% else %}
  bind                      :{{ haproxy_stats_port }}
{% endif %}
  http-request use-service  prometheus-exporter if { path /metrics }
  http-request return status 404 if !{ path /stats }
  stats enable
  stats uri                 /stats
{% if haproxy_stats_auth %}
  stats auth                {{ haproxy_stats_auth.username | default(_haproxy_default_stats_auth_username) }}:{{ haproxy_stats_auth.password }}
{%   if haproxy_stats_auth.realm %}
  stats realm               {{ haproxy_stats_auth.realm }}
{%   endif %}
{% endif %}
  stats hide-version
  stats show-legends
  stats refresh             10s
  maxconn                   10
  timeout client            100s
  timeout server            100s
  timeout connect           100s
  timeout queue             100s
  option dontlog-normal
  option httplog


##########################
#  CONNECTION TRACKING   #
##########################

backend concurrency_st
  stick-table  type ip size 100k store conn_cur


##########################
#         IRODS          #
##########################

frontend irods_main
  bind                       :{{ haproxy_irods_port }}
  acl                        is-conn        capture.req.hdr(0) -m str RODS_CONNECT
  acl                        is-ping        capture.req.hdr(0) -m str HEARTBEAT
  acl                        vip-src        src -f /etc/haproxy/vip.lst
  acl                        throttle-conn  sc1_conn_cur gt 1
  acl                        block-conn     sc1_conn_cur gt 10
  tcp-request inspect-delay  5s
  tcp-request content        capture req.payload_lv(0,4),regsub(^\s*<MsgHeader_PI\s*>[\s\S]*<type\s*>,),regsub(</type\s*>[\s\S]*</MsgHeader_PI\s*>\s*$,) len 16
  tcp-request content        track-sc1 src table concurrency_st if is-conn !vip-src
  tcp-request content        reject if !is-conn !is-ping or block-conn
  use_backend                irods_throttled if !is-ping throttle-conn
  default_backend            irods_direct

frontend irods_reconn
  bind             :{{ haproxy_irods_reconn_ports }}
  default_backend  irods_direct

backend irods_throttled
  server  indirect /haproxy_irods.sock send-proxy maxconn {{ haproxy_irods_throttled_max_conn }}

frontend irods_indirect
  bind             /var/lib/haproxy/haproxy_irods.sock accept-proxy
  default_backend  irods_direct

backend irods_direct
{# XXX: Until we are load balancing iRODS servers, I'm disabling checks to prevent false positives #}
  server                 irods {{ haproxy_irods_host if haproxy_irods_host|ansible.utils.ipaddr else lookup('dig', haproxy_irods_host) }}{# check inter {{ haproxy_irods_check_period }}#} maxconn {{ haproxy_irods_direct_max_conn }}
{#  option tcp-check
 #  tcp-check connect
 #  tcp-check send-binary  0000006e
 #  tcp-check send         <MsgHeader_PI><type>RODS_CONNECT</type><msgLen>216</msgLen><errorLen></errorLen><bsLen></bsLen></MsgHeader_PI><StartupPack_PI><proxyUser>PING</proxyUser><proxyRcatZone></proxyRcatZone><clientUser></clientUser><clientRcatZone></clientRcatZone><relVersion></relVersion><apiVersion></apiVersion><option></option></StartupPack_PI>
 #  tcp-check expect       string <MsgHeader_PI>\n<type>RODS_VERSION</type>
 #  tcp-check send-binary  0000006f
 #  tcp-check send         <MsgHeader_PI><type>RODS_DISCONNECT</type><msgLen>0</msgLen><errorLen></errorLen><bsLen></bsLen></MsgHeader_PI>
 #}


##########################
#         SFTP           #
##########################

listen sftp
  bind                    :{{ haproxy_sftp_port }}
  acl                     vip-src     src -f /etc/haproxy/vip.lst
  acl                     block-conn  sc1_conn_cur gt 10
  tcp-request connection  track-sc1 src table concurrency_st if !vip-src
  tcp-request connection  reject if block-conn
  server                  sftp {{ haproxy_sftp_hosts[0] if haproxy_sftp_hosts[0]|ansible.utils.ipaddr else lookup('dig', haproxy_sftp_hosts[0]) }}:{{ haproxy_sftp_backend_port }} send-proxy-v2


##########################
#         WEBDAV         #
##########################

listen webdav
  mode http
  bind          :{{ haproxy_webdav_port }}
{% if haproxy_stats_tls_crt %}
  http-request  redirect scheme https
{% else %}
  server        dav {{ haproxy_webdav_hosts[0] if haproxy_webdav_hosts[0]|ansible.utils.ipaddr else lookup('dig', haproxy_webdav_hosts[0]) }}
{% endif %}
  option httplog

{% if haproxy_stats_tls_crt %}
listen webdavs
  mode http
  bind          :{{ haproxy_webdav_tls_port }} ssl crt {{ haproxy_stats_tls_crt }}
  acl           vip-src     src -f /etc/haproxy/vip.lst
  acl           allowed     src -f /etc/haproxy/allow.lst
  acl           blocked     src -f /etc/haproxy/block.lst
  acl           block-conn  sc1_conn_cur gt 10
  http-request  track-sc1 src table concurrency_st if !vip-src
  http-request  reject if !vip-src !allowed blocked or block-conn
  server        dav {{ haproxy_webdav_hosts[0] if haproxy_webdav_hosts[0]|ansible.utils.ipaddr else lookup('dig', haproxy_webdav_hosts[0]) }} ssl crt {{ haproxy_stats_tls_crt }} ca-file {{ haproxy_stats_tls_crt }}
  option        httplog
{% endif %}
