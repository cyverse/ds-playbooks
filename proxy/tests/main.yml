---
- name: test template default expansion
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../roles/haproxy/defaults/main.yml
  vars:
    vip: "{{ lookup('template', '../roles/haproxy/templates/vip.lst.j2') }}"
    haproxy: "{{ lookup('template', '../roles/haproxy/templates/haproxy.cfg.j2') }}"
  tasks:
    - name: verify the VIP list has nothing below the header comment
      assert:
        that:
          - vip is search('^#')
          - vip is not search('\n[^#\n]')

    - name: verify haproxy config is ansible managed
      assert:
        that: haproxy is search('^#\n# Ansible managed')

    - name: verify haproxy config defaults section
      debug:
        msg: TODO verify {{ item }}
      with_items:
        - maxconn
        - timeout queue

    - name: verify haproxy config template expansion
      debug:
        msg: TODO verify {{ item }}
      with_items:
        - stats listener
        - irods frontend
        - irods_reconn frontend
        - irods_throttled backend
        - irods_direct backend
        - webdav listener


- name: test VIP list template custom expansion
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../roles/haproxy/defaults/main.yml
    - vars/vip_clients.yml
  vars:
    vip: "{{ lookup('template', '../roles/haproxy/templates/vip.lst.j2') }}"
    dirk_ip: "{{ lookup('dig', 'dirk.cyverse.org') }}"
  tasks:
    - name: verify the ip address passes through
      assert:
        that: vip is search('\n' ~ ('1.2.3.4'|regex_escape) ~ '\n')

    - name: verify the host name converted to address
      assert:
        that: vip is search('\n' ~ (dirk_ip|regex_escape) ~ '\n')

    - name: verify CIDR block passes through
      assert:
        that: vip is search('\n' ~ ('5.6.7.0/24'|regex_escape) ~ '\n')


- name: test haproxy config template custom expansion
  hosts: localhost
  gather_facts: false
  tasks:
    - name: test
      debug:
        msg: TODO implement


- name: test set up HAProxy
  hosts: proxy
  become: true
  tasks:
    - name: retrieve installed packages
      package_facts:
        strategy: all

    - name: test haproxy installed
      fail:
      when: "'haproxy' not in ansible_facts.packages"

    - name: test install | install socat
      debug:
        msg: TODO implement

    - name: test configure | allowing proxy to listen on stats port
      debug:
        msg: TODO implement

    - name: test configure | enabling SELinux booleans for proxy
      debug:
        msg: TODO implement

    - name: test change rsyslog.conf block Id to proxy
      command: "grep --invert --quiet 'DS MANAGED BLOCK (load_balancer)' /etc/rsyslog.conf"
      changed_when: false

    - name: test configure rsyslog to listen on UDP socket
      shell: |
        printf -v expSettings '$ModLoad imudp\n$UDPServerRun 514\n$UDPServerAddress 127.0.0.1'
        actSettings=$(sed --quiet \
          '/^# BEGIN DS MANAGED BLOCK (haproxy)/{N;N;N;s/^[^\n]*\n//;p}' /etc/rsyslog.conf)
        [[ "$actSettings" = "$expSettings" ]]
      changed_when: false
      args:
        executable: /bin/bash

    - name: test place rsyslog config for HAProxy
      stat:
        path: /etc/rsyslog.d/haproxy.conf
      register: result
      failed_when: not result.stat.exists

    - name: test place logrotate config for HAProxy
      stat:
        path: /etc/logrotate.d/haproxy
      register: result
      failed_when: not result.stat.exists

    - name: test place TLS certificates file
      stat:
        path: /etc/ssl/private/testing.pem
      register: result
      failed_when: not result.stat.exists or not result.stat.roth

    - name: retrieve TLS certificates file
      slurp:
        src: /etc/ssl/private/testing.pem
      register: pem_encoded

    - name: decode TLS certificates file
      set_fact:
        pem: "{{ pem_encoded['content'] | b64decode }}"

    - name: verify TLS certificates file contents
      assert:
        that: pem == 'PEM CONTENTS'

    - name: test VIP list placement
      stat:
        path: /etc/haproxy/vip.lst
      register: response
      failed_when: not response.stat.exists or not result.stat.roth

    - name: test configure | place haproxy config file 
      debug:
        msg: TODO implement

    - name: test firewall | place nf_conntrack.conf
      debug:
        msg: TODO implement
