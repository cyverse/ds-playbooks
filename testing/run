#!/usr/bin/env bash

show_help() {
  cat <<EOF

$ExecName

Usage:
  $ExecName [options] <playbook_folder>

test Data Store playbooks

Parameters:
  <playbook_folder>  the path to the root directory for a collection of
                     playbooks

Options:
$(printHelpText)

Summary:
This script runs a playbook with in the testing environment. If no inventory
hosts file is provided, it will use 'hosts-all'. If no playbook is provided, no
playbook will be run. When combined with -i, this allows the environment to be
started in interactive mode.
EOF
}


printHelpText() {
  if [[ "$OSTYPE" == "darwin"* ]]
  then
    cat <<EOF
  -I <hosts>     the name of the inventory hosts file to use
  -P <playbook>  the path to the playbook to test relative to <playbook_folder>.
  -S <setup>     the path relative to <playbook_folder> to a playbook that
                 prepares the environment for testing <playbook>

  -h             show help and exit
  -i             after running the playbook, open a shell that allows manual
                 inspection of the configuration files, vaults, and logs
  -p             more information will be output and newlines will be expanded
                in that output.
EOF
  else
    cat <<EOF
  -I, --inventory-hosts <hosts>  the name of the inventory hosts file to use
  -P, --playbook <playbook>      the path to the root directory for a collection
                                 of playbooks, default is current working
                                 directory
  -S, --setup <setup>            the path relative to <playbook_folder> to a
                                 playbook that prepares the environment for
                                 testing <playbook>

  -h, --help                     show help and exit
  -i, --inspect                  after running the playbook, open a shell that
                                 allows manual inspection of the configuration
                                 files, vaults, and logs
  -p, --pretty                   more information will be output and newlines
                                will be expanded in that output.
EOF
  fi
}


set -o errexit -o nounset -o pipefail

if [[ "$OSTYPE" == "darwin"* ]]
then
  ExecName=$(greadlink -f "$0")
else
  ExecName=$(readlink --canonicalize "$0")
fi
readonly ExecName

BaseDir=$(dirname "$ExecName")
readonly BaseDir

readonly Cfg="$BaseDir"/config.inc
readonly DefaultHosts=hosts-all

# shellcheck disable=SC1090
source "$Cfg"


main() {
  declare -A opts=(
    [help]=''
    [inspect]=''
    [inventory-hosts]="$DefaultHosts"
    [playbook]=''
    [playbook-folder]=''
    [pretty]=''
    [setup]='' )

  if ! resolve_opts opts "$@"
  then
    exit_with_help
  fi

  if [[ -n "${opts[help]}" ]]
  then
    show_help
    return
  fi

  if [ -z "${opts[playbook-folder]}" ]
  then
    exit_with_help
  fi

  local playbooks
  playbooks="$(resolve_playbook_dir "${opts[playbook-folder]}")"

  local playbook
  if [[ -n "${opts[playbook]}" ]]
  then
    playbook="$(resolve_playbook "$playbooks" "${opts[playbook]}")"
  fi

  local setup
  if [[ -n "${opts[setup]}" ]]
  then
    setup="$(resolve_playbook "$playbooks" "${opts[setup]}")"
  fi

  do_run \
    "${opts[inspect]}" \
    "${opts[pretty]}" \
    "${opts[inventory-hosts]}" \
    "$playbooks" \
    "${setup-}" \
    "${playbook-}"
}


resolve_opts() {
  local optsVar="$1"
  shift

  local args
  args="$(parse_cmd_line "$@")"
  eval set -- "$args"

  while true
  do
    case "$1" in
      -h|--help)
        eval "$optsVar"[help]=help
        shift 1
        ;;
      -I|--inventory-hosts)
        eval "$optsVar""[inventory-hosts]='$2'"
        shift 2
        ;;
      -i|--inspect)
        eval "$optsVar"[inspect]=inspect
        shift 1
        ;;
      -P|--playbook)
        eval "$optsVar""[playbook]='$2'"
        shift 2
        ;;
      -p|--pretty)
        eval "$optsVar"'[pretty]=pretty'
        shift 1
        ;;
      -S|--setup)
        eval "$optsVar""[setup]='$2'"
        shift 2
        ;;
      --)
        shift 1
        break
        ;;
    esac
  done

  if (( $# >= 1 ))
  then
    eval "$optsVar""[playbook-folder]='$1'"
  fi
}


do_run() {
  local doInspect="$1"
  local pretty="$2"
  local hosts="$3"
  local playbooks="$4"
  local setup="$5"
  local playbook="$6"

  "$BaseDir"/env/controller "$Cfg" start

  local rc
  if ! \
    "$BaseDir"/ansible-tester/run \
      "$doInspect" "$pretty" '' "$hosts" "$playbooks" "$setup" "$playbook"
  then
    rc=1
  fi

  "$BaseDir"/env/controller "$Cfg" stop
  return ${rc-0}
}


exit_with_help() {
  show_help >&2
  exit 1
}


parse_cmd_line() {
  local opts
  if [[ "$OSTYPE" == "darwin"* ]]
  then
    #shellcheck disable=SC2048,SC2086
    opts="$(getopt hiI:P:pS: $*)"
  else
    opts="$(\
      getopt \
        --longoptions help,inspect,inventory-hosts:,playbook:,pretty,setup: \
        --options hiI:P:pS: \
        --name "$ExecName" \
        -- \
        "$@" )"
  fi

  local ret="$?"

  if [ "$ret" -ne 0 ]
  then
    exit_with_help
  fi

  printf '%s' "$opts"
}


resolve_playbook() {
  local playbooks="$1"
  local playbook="$2"

  if [[ "$playbook" != *.* ]]
  then
    playbook="$playbook".yml
  fi

  if ! [ -f "$playbooks"/"$playbook" ]
  then
    printf 'The playbook %s/%s does not exist\n' "$playbooks" "$playbook" >&2
    exit 1
  fi

  printf '%s' "$playbook"
}


resolve_playbook_dir() {
  local playbooks="$1"

  if ! [[ "$playbooks" =~ ^/ ]]
  then
    playbooks="$(pwd)"/"$playbooks"
  fi

  if ! [ -d "$playbooks" ]
  then
    printf '%s is not a directory\n' "$playbooks" >&2
    exit 1
  fi

  printf '%s' "$playbooks"
}


main "$@"
